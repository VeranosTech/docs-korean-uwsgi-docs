# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../CGI.rst:2
msgid "Running CGI scripts on uWSGI"
msgstr ""

#: ../../CGI.rst:4
msgid ""
"The CGI plugin provides the ability to run CGI scripts using the uWSGI "
"server."
msgstr ""

#: ../../CGI.rst:6
msgid ""
"Web servers/clients/load balancers send requests to the uWSGI server "
"using modifier ``9``. uWSGI then uses the variables passed from the "
"client as CGI variables (on occasion fixing them) and calls the "
"corresponding script/executable, re-forwarding its output to the client."
msgstr ""

#: ../../CGI.rst:8
msgid ""
"The plugin tries to resemble Apache's behavior, allowing you to run CGI "
"scripts even on webservers that do not support CGI natively, such as "
"Nginx."
msgstr ""

#: ../../CGI.rst:11
msgid "Enabling the plugin"
msgstr ""

#: ../../CGI.rst:13
msgid ""
"The CGI plugin is by default not built in to the core. You need to build "
"a binary with cgi embedded or build the cgi plugin."
msgstr ""

#: ../../CGI.rst:15
msgid "To build a single binary with CGI support:"
msgstr ""

#: ../../CGI.rst:21
msgid "To compile it as a plugin,"
msgstr ""

#: ../../CGI.rst:27
msgid "or, from sources directory:"
msgstr ""

#: ../../CGI.rst:34
msgid "Configuring CGI mode"
msgstr ""

#: ../../CGI.rst:36
msgid ""
"The ``cgi <[mountpoint=]path>`` option is the main entry point for "
"configuring your CGI environment."
msgstr ""

#: ../../CGI.rst:38
msgid ""
"``path`` may be a directory or an executable file. In the case of a "
"directory, the CGI plugin will use the URI to find the path of the "
"script. If an executable is passed, it will be run, with ``SCRIPT_NAME``,"
" ``SCRIPT_FILENAME`` and ``PATH_INFO`` set in its environment."
msgstr ""

#: ../../CGI.rst:41
msgid ""
"The ``mountpoint`` is optional. You can use it to map different URIs to "
"different CGI directories/scripts."
msgstr ""

#: ../../CGI.rst:45
msgid "Notes"
msgstr ""

#: ../../CGI.rst:47
msgid ""
"Remember to use uWSGI's resource limiting and jailing techniques "
"(namespaces, chroot, capability, unshare....) with your CGI apps to limit"
" the damage they might cause."
msgstr ""

#: ../../CGI.rst:48
msgid ""
"Starting from uWSGI 2.0.2 you can have even more cheap concurrency by "
"using async mode."
msgstr ""

#: ../../CGI.rst:49
msgid ""
"If not mapped to a helper, each CGI script must have read and execution "
"permissions."
msgstr ""

#: ../../CGI.rst:52
msgid "Examples"
msgstr ""

#: ../../CGI.rst:55
msgid "Example 1: Dumb CGI-enabled directory"
msgstr ""

#: ../../CGI.rst:64
msgid ""
"Each request will search for the specified file in :file:`/var/www/cgi-"
"bin` and execute it."
msgstr ""

#: ../../CGI.rst:66
msgid ""
"A request to ``http://example.com/foo.cgi`` would run ``/var/www/cgi-"
"bin/foo.cgi``."
msgstr ""

#: ../../CGI.rst:69
msgid "Example 2: old-style cgi-bin directory"
msgstr ""

#: ../../CGI.rst:78
msgid ""
"A call to ``http://example.com/cgi-bin/foo`` will run ``/var/lib/cgi-"
"bin/foo``."
msgstr ""

#: ../../CGI.rst:81
msgid "Example 3: restricting usage to certain extensions"
msgstr ""

#: ../../CGI.rst:83
msgid "We want only .cgi and .pl files to be executed:"
msgstr ""

#: ../../CGI.rst:95
msgid "Example 4: mapping scripts to interpreters using their extension"
msgstr ""

#: ../../CGI.rst:97
msgid ""
"We want to run files ending with ``.php`` in the directory ``/var/www`` "
"via the ``php5-cgi`` binary:"
msgstr ""

#: ../../CGI.rst:108
msgid ""
"If a file is run with an helper, the file to be run will not require the "
"execute permission bit. The helper of course does."
msgstr ""

#: ../../CGI.rst:110
msgid "Extension comparison is not case sensitive."
msgstr ""

#: ../../CGI.rst:113
msgid "Example 5: running PHP scripts as CGI via Nginx"
msgstr ""

#: ../../CGI.rst:115
msgid ""
"Configure Nginx to pass .php requests to uWSGI, with :file:`/var/www/foo`"
" as the document root."
msgstr ""

#: ../../CGI.rst:126
msgid "And configure uWSGI like this:"
msgstr ""

#: ../../CGI.rst:138
msgid "Example 6: Concurrency"
msgstr ""

#: ../../CGI.rst:140
msgid ""
"By default each uWSGI worker will be able to run a single CGI script. "
"This mean that using one process, will block your incoming requests until"
" the first request has been ended."
msgstr ""

#: ../../CGI.rst:143
msgid ""
"Adding more workers will mitigate the problem, but will consume a lot of "
"memory."
msgstr ""

#: ../../CGI.rst:145
msgid ""
"Threads are a better choice. Let's configure each worker process to run "
"20 worker threads and thus run 20 CGI scripts concurrently."
msgstr ""

#: ../../CGI.rst:158
msgid "Using async mode to have even more cheap concurrency:"
msgstr ""

#: ../../CGI.rst:172
msgid ""
"this will spawn 200 coroutines, each able to manage a CGI script (with "
"few K of memory)"
msgstr ""

#: ../../CGI.rst:176
msgid "Example 7: Mailman web interface behind Nginx"
msgstr ""

#: ../../CGI.rst:196
msgid ""
"The ``cgi-index`` directive specifies which script is run when a path "
"ending with a slash is requested. This way ``/cgi-bin/mailman/`` will be "
"mapped to the ``/cgi-bin/mailman/listinfo`` script."
msgstr ""

#: ../../CGI.rst:199
msgid "Example 8: Viewvc as CGI in a subdir"
msgstr ""

#: ../../CGI.rst:201
msgid "Using the Mountpoint option."
msgstr ""

#: ../../CGI.rst:212
msgid "Example 9: using the uWSGI HTTP router and the ``check-static`` option"
msgstr ""

#: ../../CGI.rst:214
msgid ""
"This is pretty much a full-stack solution using only uWSGI running on "
"port 8080."
msgstr ""

#: ../../CGI.rst:242
msgid "Example 10: optimizing CGIs (advanced)"
msgstr ""

#: ../../CGI.rst:244
msgid ""
"You can avoid the overhead of re-running interpreters at each request, "
"loading the interpreter(s) on startup and calling a function in them "
"instead of ``execve()`` ing the interpreter itself."
msgstr ""

#: ../../CGI.rst:246
msgid ""
"The :file:`contrib/cgi_python.c` file in the source distribution is a "
"tiny example on how to optimize Python CGI scripts."
msgstr ""

#: ../../CGI.rst:248
msgid ""
"The Python interpreter is loaded on startup, and after each ``fork()``,  "
"``uwsgi_cgi_run_python`` is called."
msgstr ""

#: ../../CGI.rst:250
msgid "To compile the library you can use something like this:"
msgstr ""

#: ../../CGI.rst:257
msgid "And then map ``.py`` files to the ``uwsgi_cgi_run_python`` function."
msgstr ""

#: ../../CGI.rst:269
msgid "}}}"
msgstr ""

#: ../../CGI.rst:271
msgid ""
"Remember to prefix the symbol in the helper with ``sym://`` to enable "
"uWSGI to find it as a loaded symbol instead of a disk file."
msgstr ""

