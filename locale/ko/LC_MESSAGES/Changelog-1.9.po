# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Changelog-1.9.rst:2
msgid "uWSGI 1.9"
msgstr ""

#: ../../Changelog-1.9.rst:5
msgid ""
"This is the version that will lead to the LTS 2.0. It includes a lot of "
"internal changes and removal of a lot of basically unused, broken, or too"
" ugly functionality."
msgstr ""

#: ../../Changelog-1.9.rst:7
msgid "Options deprecated in 1.0.x have been definitely removed."
msgstr ""

#: ../../Changelog-1.9.rst:10
msgid "Non-blocking for all"
msgstr ""

#: ../../Changelog-1.9.rst:12
msgid ""
"From now on, all of the request plugins, need to be non-blocking. A new "
"set of C/C++/Obj-C api have been added to help the user/developer writing"
" non-blocking code in a safe way.  Plugins like the RPC one have been "
"rewritten using that new api, allowing you to use it with engines like "
"Gevent or Coro::Anyevent The async mode has been rewritten to better "
"cooperate with this new rule. More info can be found on :doc:`Async` The "
"new async mode requires some form of coroutine/greenthread/suspend engine"
" to correctly work. Again, check :doc:`Async`"
msgstr ""

#: ../../Changelog-1.9.rst:22
msgid "Coro::AnyEvent"
msgstr ""

#: ../../Changelog-1.9.rst:24
msgid ""
"The Perl/PSGI plugin is one of the most ancient in the uWSGI project, but"
" used to not support the async mode in advanced ways."
msgstr ""

#: ../../Changelog-1.9.rst:26
msgid ""
"Thanks to the new :doc:`Async` mode, a Coro::Anyevent (coroae) loop "
"engine has been added."
msgstr ""

#: ../../Changelog-1.9.rst:28
msgid ""
"To build it you need the Coro::Anyevent package (you can use cpanm to get"
" it), then just add --coroae <n> to your options where <n> is the number "
"of async cores to spawn."
msgstr ""

#: ../../Changelog-1.9.rst:33
msgid "The JVM plugin"
msgstr ""

#: ../../Changelog-1.9.rst:35
msgid ""
"We finally have a truly working JVM infrastructure in uWSGI 1.9.  Check "
"the new docs at :doc:`JVM` Improved :doc:`JWSGI` support is available as "
"well as the new Clojure :doc:`Ring` plugin"
msgstr ""

#: ../../Changelog-1.9.rst:40
msgid "The Mono ASP.NET plugin"
msgstr ""

#: ../../Changelog-1.9.rst:42
msgid ""
"The first Mono plugin attempt (in 2010) was a total failure. Now we have "
"a new shining implementation."
msgstr ""

#: ../../Changelog-1.9.rst:44
msgid "Check docs here :doc:`Mono`"
msgstr ""

#: ../../Changelog-1.9.rst:47
msgid "Language independent HTTP body management"
msgstr ""

#: ../../Changelog-1.9.rst:49
msgid ""
"One of the most annoying task in writing uWSGI request plugins, was re-"
"implementing the management of HTTP body reader every time."
msgstr ""

#: ../../Changelog-1.9.rst:51
msgid ""
"The new non-blocking api added 3 simple generic C/C++/Obj-C functions to "
"deal with it in a language independent way:"
msgstr ""

#: ../../Changelog-1.9.rst:60
msgid ""
"they automatically manage post-buffering, non-blocking and upload "
"progress."
msgstr ""

#: ../../Changelog-1.9.rst:62
msgid "All of the request plugins have been updated to the new api"
msgstr ""

#: ../../Changelog-1.9.rst:67
msgid "Faster uwsgi/HTTP/FastCGI/SCGI native sockets"
msgstr ""

#: ../../Changelog-1.9.rst:69
msgid ""
"All of the --socket protocol parsers have been rewritten to be faster "
"(less syscall usage) and to use less memory.  They are now more complex, "
"but you should note (on loaded site) a reduced amount of syscalls per-"
"request."
msgstr ""

#: ../../Changelog-1.9.rst:73
msgid ""
"The SCGI protocol support has been added, while a NPH fastcgi mode (where"
" the output is HTTP instead of cgi) has been implemented."
msgstr ""

#: ../../Changelog-1.9.rst:75
msgid "The FastCGI protocol now supports true sendfile() usage"
msgstr ""

#: ../../Changelog-1.9.rst:77
msgid ""
"The old behaviour of storing the request body for HTTP and FastCGI on a "
"temp file, has been removed (unless you use post-buffering).  This means "
"you can now have upload progress with protocols other than uwsgi."
msgstr ""

#: ../../Changelog-1.9.rst:82
msgid "Request logging VS err logging"
msgstr ""

#: ../../Changelog-1.9.rst:84
msgid ""
"One of the most annoying problem with older uWSGI releases was the lack "
"of ability to easily split request logs from error logs.  You can now "
"create a logger and map it only to request logging:"
msgstr ""

#: ../../Changelog-1.9.rst:94
msgid ""
"As an example you may want to send request logging to syslog and redis, "
"and error log to mongodb (on the foo.bar collection):"
msgstr ""

#: ../../Changelog-1.9.rst:104
msgid "Or just use (boring) files"
msgstr ""

#: ../../Changelog-1.9.rst:114
msgid "Chain reloading"
msgstr ""

#: ../../Changelog-1.9.rst:116
msgid ""
"When in lazy/lazy_apps mode, you can simply destroy a worker to force it "
"to reload the application code."
msgstr ""

#: ../../Changelog-1.9.rst:119
msgid ""
"A new reloading system named \"chain reload\", allows you to reload one "
"worker at time (opposed to the standard way where all of the workers are "
"destroyed in bulk)"
msgstr ""

#: ../../Changelog-1.9.rst:123
msgid ""
"Chain reloading can only be triggered via \"touch\": --touch-chain-reload"
" <file>"
msgstr ""

#: ../../Changelog-1.9.rst:126
msgid "Offloading improvements"
msgstr ""

#: ../../Changelog-1.9.rst:128
msgid ""
"Offloading appeared in uWSGI 1.4 and is one of the most loved features.  "
"In 1.9 we added a new engine: \"write\", that allows you to offload the "
"write of files on disk.  A general function api uwsgi.offload() is on "
"work, to allow applications to access the offload engine.  All of the "
"uWSGI parts sending static files (including the language-specific "
"implementations, like WSGI wsgi.file_wrapper) have been extended to "
"automatically use offloading if available.  This means you can use your "
"Framework's way for serving static files, without losing too much "
"performance and (more important) without blocking your workers."
msgstr ""

#: ../../Changelog-1.9.rst:140
msgid "Better static files management/serving"
msgstr ""

#: ../../Changelog-1.9.rst:142
msgid "uWSGI 1.9 received many improvements in static file serving."
msgstr ""

#: ../../Changelog-1.9.rst:144
msgid "You may want to check: :doc:`StaticFiles`"
msgstr ""

#: ../../Changelog-1.9.rst:146
msgid ""
"For syadmins one of the most interesting new features is the ability to "
"use the uWSGI new generation cacheing (see below) to store request -> "
"absolute_path mappings"
msgstr ""

#: ../../Changelog-1.9.rst:151
msgid "The New Generation Cache subsystem (cache2)"
msgstr ""

#: ../../Changelog-1.9.rst:153
msgid ""
"The uWSGI caching subsystem has been completely rewritten to be a more "
"general purpose in-memory key/value store.  The old caching subsystem has"
" been re-built on top of it, and is now more of a general \"web caching\""
" system.  The new cache subsystem allows you to control all of the "
"aspects of your memory store, from the hashing algorithm to the amount of"
" blocks."
msgstr ""

#: ../../Changelog-1.9.rst:159
msgid "You can now have multiple caches per-instance (identified by name)"
msgstr ""

#: ../../Changelog-1.9.rst:161
msgid "To create a cache just use the new --cache2 option"
msgstr ""

#: ../../Changelog-1.9.rst:172
msgid "In this example we created 3 caches: mycache, faster and fslike."
msgstr ""

#: ../../Changelog-1.9.rst:174
msgid ""
"The first one is a standard old-style, cache able to store 100 items of a"
" maximum size of 64k with keys limited to 2048 bytes using djb33x hashing"
" algorithm The second one use the murmur2 hashing algorithm, each key can"
" be at most 1000 bytes, can store 200 items of max 4k The last one works "
"like a filesystem, where each item can span over multiple blocks. That "
"means, fslike cache can save lot of memory for boject of different size "
"(but it will be slower than non-bitmap based caches)"
msgstr ""

#: ../../Changelog-1.9.rst:182
msgid "The options you can specify in cache2 are the following:"
msgstr ""

#: ../../Changelog-1.9.rst:184
msgid "``name`` the name of the cache (must be unique) REQUIRED"
msgstr ""

#: ../../Changelog-1.9.rst:186
msgid ""
"``items/max_items/maxitems`` set the max number of items the cache can "
"store REQUIRED"
msgstr ""

#: ../../Changelog-1.9.rst:188
msgid "``blocksize`` set the size of a single block"
msgstr ""

#: ../../Changelog-1.9.rst:190
msgid "``blocks`` set the number of blocks (used only in bitmap mode)"
msgstr ""

#: ../../Changelog-1.9.rst:192
msgid ""
"``hash`` set the hashing algorithm, currently supported: djbx33 and "
"murmur2"
msgstr ""

#: ../../Changelog-1.9.rst:194
msgid ""
"``hashsize/hash_size`` set the size of the hash table (default to 65536 "
"items)"
msgstr ""

#: ../../Changelog-1.9.rst:196
msgid "``keysize/key_size`` set the max size of a key"
msgstr ""

#: ../../Changelog-1.9.rst:198
msgid "``store`` set the filename in which to persistent store the cache"
msgstr ""

#: ../../Changelog-1.9.rst:200
msgid ""
"``store_sync/storesync`` set the frequency (in seconds) at which msync() "
"is called to flush cache on disk (when in persistent mode)"
msgstr ""

#: ../../Changelog-1.9.rst:202
msgid ""
"``node/nodes`` the new cache subsystem can send cache updates via udp "
"packet. With this option you set one or more (separated with `;`) udp "
"addresses on which to send updates"
msgstr ""

#: ../../Changelog-1.9.rst:204
msgid ""
"``sync`` set it to the address of a cache server. Its whole content will "
"be copied in the new cache (use it for initial sync)"
msgstr ""

#: ../../Changelog-1.9.rst:206
msgid ""
"``udp/udp_servers/udp_server/udpservers/udpserver`` bind to the specified"
" udp addresses (separated with `;`) listening for cache updates"
msgstr ""

#: ../../Changelog-1.9.rst:208
msgid "``bitmap`` enable botmap mode (set it to 1)"
msgstr ""

#: ../../Changelog-1.9.rst:210
msgid ""
"If you are asking yourself why such low-level tunings exists, you have to"
" take in account that the new caching subsystem is used in lot of areas, "
"so for different needs you may want different tuning. Just check "
":doc:`SSLScaling` for an example"
msgstr ""

#: ../../Changelog-1.9.rst:213
msgid ""
"The old --cache-server option has been removed. The threaded cache server"
" added in 0.9.8 has been completed superseeded by the new non blocking "
"infrastructure. If you load the \"cache\" plugin (enabled by default in "
"monolithic build) a cache server will be available and managed by the "
"workers."
msgstr ""

#: ../../Changelog-1.9.rst:218
msgid "Update docs are available here :doc:`Caching`"
msgstr ""

#: ../../Changelog-1.9.rst:221
msgid "The Legion subsystem"
msgstr ""

#: ../../Changelog-1.9.rst:223
msgid ""
"The Legion subsystem is a new whole addition to the uWSGI project.  It "
"has superseeded the old Clustering subsystem (which has been removed in "
"1.9).  It implements a quorum system to manage shared resources in "
"clustered environments.  Docs are already available: :doc:`Legion`"
msgstr ""

#: ../../Changelog-1.9.rst:229
msgid "Cygwin (windows) support"
msgstr ""

#: ../../Changelog-1.9.rst:231
msgid ""
"uWSGI can be compiled on windows machines using the cygwin POSIX "
"emulation system.  The event subsystem uses simple poll() (mapped to "
"select() on cygwin), while the lock engine uses windows mutexes.  Albeit "
"from our tests it looks pretty solid, we consider the porting still "
"\"experimental\""
msgstr ""

#: ../../Changelog-1.9.rst:238
msgid "Advanced Exceptions subsystem"
msgstr ""

#: ../../Changelog-1.9.rst:240
msgid ""
"As well as the request body language-independent management, an exception"
" management system has been added.  Currently supported only in the "
"Python and Ruby plugins, allows language-independent handling of "
"exceptions cases (like reloading on a specific exception).  The --catch-"
"exception option has been improved to show lot of useful information. "
"Just try it (in development !!!) Future development will allow automatic "
"sending of exception to system like Sentry or Airbrake."
msgstr ""

#: ../../Changelog-1.9.rst:249
msgid "SPDY, SSL and SNI"
msgstr ""

#: ../../Changelog-1.9.rst:251
msgid ""
"Exciting new features have been added to the SSL system and the HTTP "
"router"
msgstr ""

#: ../../Changelog-1.9.rst:253
msgid ""
"SPDY support (currently only version 3) will get lot of users attention, "
"but SNI subsystem is what sysadmins will love"
msgstr ""

#: ../../Changelog-1.9.rst:255
msgid "Preliminary docs are available"
msgstr ""

#: ../../Changelog-1.9.rst:257
msgid ":doc:`SPDY`"
msgstr ""

#: ../../Changelog-1.9.rst:259
msgid ":doc:`SNI`"
msgstr ""

#: ../../Changelog-1.9.rst:262
msgid "HTTP router keepalive, auto-chunking, auto-gzip and transparent websockets"
msgstr ""

#: ../../Changelog-1.9.rst:264
msgid ""
"Many users have started using the HTTP/HTTPS/SPDY router in production, "
"so we started adding features to it. Remember this is ONLY a "
"router/proxy, NO I/O is allowed, so you may not be able to throw away "
"your old-good webserver."
msgstr ""

#: ../../Changelog-1.9.rst:269
msgid "The new options:"
msgstr ""

#: ../../Changelog-1.9.rst:271
msgid "``--http-keepalive`` enable HTTP/1.1 keepalive connections"
msgstr ""

#: ../../Changelog-1.9.rst:273
msgid ""
"``--http-auto-chunked`` for backend response without content-length (or "
"chunked encoding already enabled), transform the output in chunked mode "
"to maintain keepalive connections"
msgstr ""

#: ../../Changelog-1.9.rst:275
msgid ""
"``--http-auto-gzip`` automatically gzip content if uWSGI-Encoding header "
"is set to gzip, but content size (Content-Length/Transfer-Encoding) and "
"Content-Encoding are not specified"
msgstr ""

#: ../../Changelog-1.9.rst:277
msgid ""
"``--http-websockets`` automatically detect websockets connections to put "
"the request handler in raw mode"
msgstr ""

#: ../../Changelog-1.9.rst:280
msgid "The SSL router (sslrouter)"
msgstr ""

#: ../../Changelog-1.9.rst:282
msgid ""
"A new corerouter has been added, it works in the same way as the "
"rawrouter one, but will terminate ssl connections.  The sslrouter can use"
" sni for implementing virtualhosting (using the --sslrouter-sni option)"
msgstr ""

#: ../../Changelog-1.9.rst:287
msgid "Websockets api"
msgstr ""

#: ../../Changelog-1.9.rst:289
msgid ""
"20Tab S.r.l. (a company working on HTML5 browsers game) sponsored the "
"development of a fast language-independent websockets api for uWSGI. The "
"api is currently in very good shape (and maybe faster than any other "
"implementation). Docs still need to be completed but you may want to "
"check the following examples (a simple echo):"
msgstr ""

#: ../../Changelog-1.9.rst:295
msgid "https://github.com/unbit/uwsgi/blob/master/tests/websockets_echo.pl (perl)"
msgstr ""

#: ../../Changelog-1.9.rst:297
msgid ""
"https://github.com/unbit/uwsgi/blob/master/tests/websockets_echo.py "
"(python)"
msgstr ""

#: ../../Changelog-1.9.rst:299
msgid "https://github.com/unbit/uwsgi/blob/master/tests/websockets_echo.ru (ruby)"
msgstr ""

#: ../../Changelog-1.9.rst:302
msgid "New Internal Routing (turing complete ?)"
msgstr ""

#: ../../Changelog-1.9.rst:304
msgid ""
"The internal routing subsystem has been rewritten to be 'programmable'. "
"You can see it as an apache mod_rewrite with steroids (and goto ;) Docs "
"still need to be ported, but the new system allows you to modify/filter "
"CGI vars and HTTP headers on the fly, as well as managing HTTP "
"authentication and caching."
msgstr ""

#: ../../Changelog-1.9.rst:309
msgid "Updated docs here (still work in progress) :doc:`InternalRouting`"
msgstr ""

#: ../../Changelog-1.9.rst:312
msgid "Emperor ZMQ plugin"
msgstr ""

#: ../../Changelog-1.9.rst:314
msgid ""
"A new imperial monitor has been added allowing vassals to be governed "
"over zeromq messages:"
msgstr ""

#: ../../Changelog-1.9.rst:316
msgid ""
"https://uwsgi-docs.readthedocs.io/en/latest/ImperialMonitors.html#zmq-"
"zeromq"
msgstr ""

#: ../../Changelog-1.9.rst:319
msgid "Total introspection via the stats server"
msgstr ""

#: ../../Changelog-1.9.rst:321
msgid ""
"The stats server now exports all of the request variables of the "
"currently running requests for each core, so it works in multithread mode"
" too. This is a great way to inspect what your instance is doing and how "
"it does it In the future, uwsgitop could be extended to show the "
"currently running request in realtime."
msgstr ""

#: ../../Changelog-1.9.rst:328
msgid "Nagios plugin"
msgstr ""

#: ../../Changelog-1.9.rst:330
msgid ""
"Ping requests sent using nagios plugin will no longer be counted in apps "
"request stats.  This means that if application had --idle option enabled "
"nagios pings will no longer prevent app from going to idle state, so "
"starting with 1.9 --idle should be disabled when nagios plugin is used. "
"Otherwise app may be put in idle state just before nagios ping request, "
"when ping arrives it needs to wake from idle and this might take longer "
"than ping timeout, causing nagios alerts."
msgstr ""

#: ../../Changelog-1.9.rst:339
msgid "Removed and deprecated features"
msgstr ""

#: ../../Changelog-1.9.rst:341
msgid ""
"The --app option has been removed. To load applications on specific "
"mountpoints use the --mount option"
msgstr ""

#: ../../Changelog-1.9.rst:343
msgid ""
"The --static-offload-to-thread option has been removed. Use the more "
"versatile --offload-threads"
msgstr ""

#: ../../Changelog-1.9.rst:345
msgid ""
"The grunt mode has been removed. To accomplish the same behaviour just "
"use threads or directly call fork() and uwsgi.disconnect()"
msgstr ""

#: ../../Changelog-1.9.rst:347
msgid ""
"The send_message/recv_message api has been removed (use language-supplied"
" functions)"
msgstr ""

#: ../../Changelog-1.9.rst:350
msgid "Working On, Issues and regressions"
msgstr ""

#: ../../Changelog-1.9.rst:352
msgid "We missed the timeline for a bunch of expected features:"
msgstr ""

#: ../../Changelog-1.9.rst:354
msgid ""
"SPNEGO support, this is an internal routing instruction to implement "
"SPNEGO authentication support"
msgstr ""

#: ../../Changelog-1.9.rst:356
msgid "Ruby 1.9 fibers support has been rewritten, but need tests"
msgstr ""

#: ../../Changelog-1.9.rst:358
msgid ""
"Erlang support did not got required attention, very probably will be "
"post-poned to 2.0"
msgstr ""

#: ../../Changelog-1.9.rst:360
msgid "Async sleep api is incomplete"
msgstr ""

#: ../../Changelog-1.9.rst:362
msgid "SPDY push is still not implemented"
msgstr ""

#: ../../Changelog-1.9.rst:364
msgid "RADIUS and LDAP internal routing instructions are unimplemented"
msgstr ""

#: ../../Changelog-1.9.rst:366
msgid ""
"The channel subsystem (required for easy websockets communications) is "
"still unimplemented"
msgstr ""

#: ../../Changelog-1.9.rst:368
msgid ""
"In addition to this we have issues that will be resolved in upcoming "
"minor releases:"
msgstr ""

#: ../../Changelog-1.9.rst:370
msgid ""
"the --lazy mode lost usefulness, now it is like --lazy-apps but with "
"workers-reload only policy on SIGHUP"
msgstr ""

#: ../../Changelog-1.9.rst:372
msgid ""
"it looks like the JVM does not cooperate well with coroutine engines, "
"maybe we should add a check for it"
msgstr ""

#: ../../Changelog-1.9.rst:374
msgid "Solaris and Solaris-like systems did not get heavy testing"
msgstr ""

#: ../../Changelog-1.9.rst:377
msgid "Special thanks"
msgstr ""

#: ../../Changelog-1.9.rst:379
msgid ""
"A number of users/developers helped during the 1.9 development cycle. We "
"would like to make special thanks to:"
msgstr ""

#: ../../Changelog-1.9.rst:381
msgid "Łukasz Mierzwa (fastrouters scalability tests)"
msgstr ""

#: ../../Changelog-1.9.rst:383
msgid "Guido Berhoerster (making the internal routing the new skynet)"
msgstr ""

#: ../../Changelog-1.9.rst:385
msgid "Riccardo Magliocchetti (static analysis)"
msgstr ""

#: ../../Changelog-1.9.rst:387
msgid "André Cruz (HTTPS and gevent battle tests)"
msgstr ""

#: ../../Changelog-1.9.rst:389
msgid "Mingli Yuan (Clojure/Ring support and test suite)"
msgstr ""

