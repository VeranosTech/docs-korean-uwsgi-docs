# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Hooks.rst:2
msgid "Hooks"
msgstr ""

#: ../../Hooks.rst:4
msgid "(updated to uWSGI 1.9.16)"
msgstr ""

#: ../../Hooks.rst:6
msgid ""
"uWSGI's main directive is being \"modular\". The vast majority of its "
"features are exposed as plugins, both to allow users to optimize their "
"build and to encourage developers to extend it."
msgstr ""

#: ../../Hooks.rst:9
msgid ""
"Writing plugins can be an annoying task, especially if you only need to "
"change/implement a single function."
msgstr ""

#: ../../Hooks.rst:11
msgid ""
"For simple tasks, uWSGI exposes an hook API you can abuse to modify "
"uWSGI's internal behaviors."
msgstr ""

#: ../../Hooks.rst:14
msgid "The \"hookable\" uWSGI phases"
msgstr ""

#: ../../Hooks.rst:16
msgid ""
"Before being ready to manage requests, uWSGI goes through various "
"\"phases\". You can attach one or more \"hooks\" to these phases."
msgstr ""

#: ../../Hooks.rst:18
msgid ""
"Each phase can be \"fatal\", if so, a failing hook will mean failing of "
"the whole uWSGI instance (generally calling ``exit(1)``)."
msgstr ""

#: ../../Hooks.rst:20
msgid "Currently (September 2013) the following phases are available:"
msgstr ""

#: ../../Hooks.rst:22
msgid ""
"``asap`` run directly after configuration file has been parsed, before "
"anything else is done. it is fatal."
msgstr ""

#: ../../Hooks.rst:23
msgid ""
"``pre-jail`` run before any attempt to drop privileges or put the process"
" in some form of jail. it is fatal."
msgstr ""

#: ../../Hooks.rst:24
msgid ""
"``post-jail`` run soon after any jailing, but before privileges drop. If "
"jailing requires fork(), the parent process run this phase. it is fatal."
msgstr ""

#: ../../Hooks.rst:25
msgid ""
"``in-jail`` run soon after jayling, but after post-jail. If jailing "
"requires fork(), the chidlren run this phase. it is fatal."
msgstr ""

#: ../../Hooks.rst:26
msgid ""
"``as-root`` run soon before privileges drop (last chance to run something"
" as root). it is fatal."
msgstr ""

#: ../../Hooks.rst:27
msgid "``as-user`` run soon after privileges drop. it is fatal."
msgstr ""

#: ../../Hooks.rst:28
msgid "``pre-app`` run before applications loading. it is fatal."
msgstr ""

#: ../../Hooks.rst:29
msgid "``post-app`` run after applications loading. it is fatal."
msgstr ""

#: ../../Hooks.rst:30
msgid ""
"``accepting`` run before the each worker starts accepting requests "
"(available from uWSGI 1.9.21)."
msgstr ""

#: ../../Hooks.rst:31
msgid ""
"``accepting1`` run before the first worker starts accepting requests "
"(available from uWSGI 1.9.21)."
msgstr ""

#: ../../Hooks.rst:32
msgid ""
"``accepting-once`` run before the each worker starts accepting requests "
"(available from uWSGI 1.9.21, runs one time per instance)."
msgstr ""

#: ../../Hooks.rst:33
msgid ""
"``accepting1-once`` run before the first worker starts accepting requests"
" (available from uWSGI 1.9.21, runs one time per instance)."
msgstr ""

#: ../../Hooks.rst:34
msgid "``as-user-atexit`` run before shutdown of the instance. it is non-fatal."
msgstr ""

#: ../../Hooks.rst:35
msgid ""
"``as-emperor`` run soon after the spawn of a vassal in the Emperor "
"process. it is non-fatal."
msgstr ""

#: ../../Hooks.rst:36
msgid ""
"``as-vassal`` run in the vassal before executing the uwsgi binary. it is "
"fatal."
msgstr ""

#: ../../Hooks.rst:39
msgid "The \"hardcoded\" hooks"
msgstr ""

#: ../../Hooks.rst:41
msgid ""
"As said before, the purpose of the hook subsystem is to allow attaching "
"\"hooks\" to the various uWSGI phases."
msgstr ""

#: ../../Hooks.rst:43
msgid ""
"There are two kind of hooks. The simple ones are the so-called "
"\"hardcoded\" ones. They expose common patterns at the cost of "
"versatility."
msgstr ""

#: ../../Hooks.rst:45
msgid ""
"Currently (September 2013) the following \"hardcoded\" hooks are "
"available (they run in the order they are shown below):"
msgstr ""

#: ../../Hooks.rst:49
msgid "``mount`` -- mount filesystems"
msgstr ""

#: ../../Hooks.rst:51
msgid "Arguments: <filesystem> <src> <mountpoint> [flags]"
msgstr ""

#: ../../Hooks.rst:53
msgid ""
"The exposed flags are the ones available for the operating system. As an "
"example on Linux you will options like bind, recursive, readonly etc."
msgstr ""

#: ../../Hooks.rst:56
msgid "``umount`` -- unmount filesystems"
msgstr ""

#: ../../Hooks.rst:58
msgid "Arguments: <mountpoint> [flags]"
msgstr ""

#: ../../Hooks.rst:61
msgid "``exec`` run shell commands"
msgstr ""

#: ../../Hooks.rst:63
msgid "Arguments: <command> [args...]"
msgstr ""

#: ../../Hooks.rst:65
msgid "Run the command under ``/bin/sh``."
msgstr ""

#: ../../Hooks.rst:67
msgid ""
"If for some reason you do not want to use ``/bin/sh`` as the running "
"shell, you can override it with the ``--binsh`` option. You can specify "
"multiple ``--binsh`` options -- they will be tried until one valid shell "
"is found."
msgstr ""

#: ../../Hooks.rst:70
msgid "``call`` call functions in the current process address space"
msgstr ""

#: ../../Hooks.rst:72
msgid "Arguments: <symbol> [args...]"
msgstr ""

#: ../../Hooks.rst:74
msgid ""
"Generally the arguments are ignored (the only exceptions are the "
"emperor/vassal phases, see below) as the system expects to call the "
"symbol without arguments."
msgstr ""

#: ../../Hooks.rst:76
msgid ""
"``<symbol>`` can be any symbol currently available in the process's "
"address space."
msgstr ""

#: ../../Hooks.rst:78
msgid ""
"This allows some interesting tricks when combined with the ``--dlopen`` "
"uWSGI option:"
msgstr ""

#: ../../Hooks.rst:88
msgid "Build this as a shared library:"
msgstr ""

#: ../../Hooks.rst:94
msgid "and load it into the uWSGI symbol table."
msgstr ""

#: ../../Hooks.rst:100
msgid ""
"From now on, the \"foo_hello\" symbol is available in the uWSGI symbol "
"table, ready to be called by the 'call' hooks."
msgstr ""

#: ../../Hooks.rst:104
msgid ""
"As --dlopen is a wrapper for the ``dlopen()`` function, beware of "
"absolute paths and library search paths. If you do not want headaches, "
"use always absolute paths when dealing with shared libraries."
msgstr ""

#: ../../Hooks.rst:107
msgid "Attaching \"hardcoded\" hooks"
msgstr ""

#: ../../Hooks.rst:109
msgid ""
"Each hardcoded hook exposes a set of options for each phase (with some "
"exceptions)."
msgstr ""

#: ../../Hooks.rst:111
msgid ""
"Each option is composed by the name of the hook and its phase, so to run "
"a command in the ``as-root`` phase you will use ``--exec-as-root``, or "
"``--exec-as-user`` for the ``as-user`` phase."
msgstr ""

#: ../../Hooks.rst:113
msgid "Remember, you can attach all of the hooks you need to a hook-phase pair."
msgstr ""

#: ../../Hooks.rst:129
msgid ""
"The only exception to the rule are the `as-emperor` and `as-vassal` "
"phases. For various reasons they expose a bunch of handy variants -- see "
"below."
msgstr ""

#: ../../Hooks.rst:132
msgid "The \"advanced\" hooks"
msgstr ""

#: ../../Hooks.rst:134
msgid ""
"A problem that limits their versatility (a big no-no in the uWSGI state "
"of mind) with hardcoded hooks, is that you cannot control the order of "
"the whole chain (as each phase executes each hooks grouped by type). If "
"you want more control, \"advanced\" hooks are the best choice."
msgstr ""

#: ../../Hooks.rst:136
msgid ""
"Each phase has a single chain in which you specify the hook the call and "
"which handler."
msgstr ""

#: ../../Hooks.rst:138
msgid ""
"Handlers specify how to run hooks. New handlers can be registered by "
"plugins."
msgstr ""

#: ../../Hooks.rst:140
msgid "Currently the handlers exposed by the core are:"
msgstr ""

#: ../../Hooks.rst:142
msgid "``exec`` - same as the 'exec' hardcoded options"
msgstr ""

#: ../../Hooks.rst:143
msgid "``call`` - call the specified symbol ignoring return value"
msgstr ""

#: ../../Hooks.rst:144
msgid ""
"``callret`` - call the specified symbol expecting an int return. anything"
" != 0 means failure"
msgstr ""

#: ../../Hooks.rst:145
msgid "``callint`` - call the specified symbol parsing the argument as an int"
msgstr ""

#: ../../Hooks.rst:146
msgid ""
"``callintret`` - call the specified symbol parsing the argument as an int"
" and expecting an int return."
msgstr ""

#: ../../Hooks.rst:147
msgid "``mount`` - same as 'mount' hardcoded options"
msgstr ""

#: ../../Hooks.rst:148
msgid "``umount`` - same as 'umount' hardcoded options"
msgstr ""

#: ../../Hooks.rst:149
msgid "``cd`` - convenience handler, same as ``call:chdir <directory>``"
msgstr ""

#: ../../Hooks.rst:150
msgid "``exit`` - convenience handler, same as ``callint:exit [num]``"
msgstr ""

#: ../../Hooks.rst:151
msgid "``print`` - convenience handler, same as calling the ``uwsgi_log`` symbol"
msgstr ""

#: ../../Hooks.rst:152
msgid ""
"``write`` - (from uWSGI 1.9.21), write a string to the specified file "
"using write:<file> <string>"
msgstr ""

#: ../../Hooks.rst:153
msgid ""
"``writefifo`` - (from uWSGI 1.9.21), write a string to the specified FIFO"
" using writefifo:<file> <string>"
msgstr ""

#: ../../Hooks.rst:154
msgid "``unlink`` - (from uWSGI 1.9.21), unlink the specified file"
msgstr ""

