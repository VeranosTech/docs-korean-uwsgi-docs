# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../FreeBSDJails.rst:2
msgid "FreeBSD Jails"
msgstr ""

#: ../../FreeBSDJails.rst:4
msgid "uWSGI 1.9.16 introduced native FreeBSD jails support."
msgstr ""

#: ../../FreeBSDJails.rst:6
msgid ""
"FreeBSD jails can be seen as new-generation chroot() with fine-grained "
"tuning of what this \"jail\" can see."
msgstr ""

#: ../../FreeBSDJails.rst:8
msgid ""
"They are very similar to Linux namespaces even if a bit higher-level "
"(from the API point of view)."
msgstr ""

#: ../../FreeBSDJails.rst:10
msgid "Jails are available since FreeBSD 4"
msgstr ""

#: ../../FreeBSDJails.rst:14
msgid "Why managing jails with uWSGI ?"
msgstr ""

#: ../../FreeBSDJails.rst:16
msgid ""
"Generally jails are managed using the system tool \"jail\" and its "
"utilities."
msgstr ""

#: ../../FreeBSDJails.rst:18
msgid ""
"Til now running uWSGI in FreeBSD jails was pretty common, but for really "
"massive setups (read: hosting business) where an Emperor (for example) "
"manages hundreds of unrelated uWSGI instances, the setup could be really "
"overkill."
msgstr ""

#: ../../FreeBSDJails.rst:21
msgid ""
"Managing jails directly in uWSGI config files highly reduce sysadmin "
"costs and helps having a better organization of the whole infrastructure."
msgstr ""

#: ../../FreeBSDJails.rst:24
msgid "Old-style jails (FreeBSD < 8)"
msgstr ""

#: ../../FreeBSDJails.rst:26
msgid ""
"FreeBSD exposes two main api for managing jails. The old (and easier) one"
" is based on the jail() function."
msgstr ""

#: ../../FreeBSDJails.rst:28
msgid ""
"It is available since FreeBSD 4 and allows you to set the rootfs, the "
"hostname and one ore more ipv4/ipv6 addresses"
msgstr ""

#: ../../FreeBSDJails.rst:30
msgid ""
"Two options are needed for running a uWSGI instance in a jail: --jail and"
" --jail-ip4/--jail-ip6 (effectively they are 3 if you use IPv6)"
msgstr ""

#: ../../FreeBSDJails.rst:32
msgid "``--jail <rootfs> [hostname] [jailname]``"
msgstr ""

#: ../../FreeBSDJails.rst:34
msgid "``--jail-ip4 <address>`` (can be specified multiple times)"
msgstr ""

#: ../../FreeBSDJails.rst:36
msgid "``--jail-ip6 <address>`` (can be specified multiple times)"
msgstr ""

#: ../../FreeBSDJails.rst:38
msgid ""
"Showing how to create the rootfs for your jail is not the objective of "
"this document, but personally i hate rebuilding from sources, so "
"generally i simply explode the base.tgz file from an official repository "
"and chroot() to it to make the fine tuning."
msgstr ""

#: ../../FreeBSDJails.rst:41
msgid ""
"An important thing you have to remember is that the ip addresses you "
"attach to a jail must be available in the system (as aliases). As always "
"we tend to abuse uWSGI facilities. In our case the --exec-pre-jail hook "
"will do the trick"
msgstr ""

#: ../../FreeBSDJails.rst:70
msgid "New style jails (FreeBSD >= 8)"
msgstr ""

#: ../../FreeBSDJails.rst:72
msgid ""
"FreeBSD 8 introdiced a new advanced api for managing jails. Based on the "
"jail_set() syscall, libjail exposes dozens of features and allows fine-"
"tuning of your jails. To use the new api you need the --jail2 option "
"(aliased as --libjail)"
msgstr ""

#: ../../FreeBSDJails.rst:75
msgid "``--jail2 <key>[=value]``"
msgstr ""

#: ../../FreeBSDJails.rst:77
msgid ""
"Each --jail2 option maps 1:1 with a jail attribute so you can basically "
"tune everything !"
msgstr ""

#: ../../FreeBSDJails.rst:107
msgid "Note for FreeBSD >= 8.4 but < 9.0"
msgstr ""

#: ../../FreeBSDJails.rst:109
msgid ""
"uWSGI uses ipc semaphores on FreeBSD < 9 (newer FreeBSD releases have "
"POSIX semaphores support)."
msgstr ""

#: ../../FreeBSDJails.rst:111
msgid ""
"Since FreeBSD 8.4 you need to explicitely allows sysvipc in jails. So be "
"sure to have"
msgstr ""

#: ../../FreeBSDJails.rst:122
msgid "DevFS"
msgstr ""

#: ../../FreeBSDJails.rst:124
msgid "The DevFS virtual filesystem manages the /dev directory on FreeBSD."
msgstr ""

#: ../../FreeBSDJails.rst:126
msgid ""
"The /dev filesystem is not mounted in the jail, but you can need it for "
"literally hundreds of reasons."
msgstr ""

#: ../../FreeBSDJails.rst:128
msgid ""
"Two main approaches are available: mounting it in the /dev/ directory of "
"the roots before creating the jail, or allowing the jail to mount it"
msgstr ""

#: ../../FreeBSDJails.rst:162
msgid "or (allow the jail itself to mount it)"
msgstr ""

#: ../../FreeBSDJails.rst:201
msgid "Reloading"
msgstr ""

#: ../../FreeBSDJails.rst:203
msgid ""
"Reloading (or binary patching) is a bit annoying to manage as uWSGI need "
"to re-exec itself, so you need a copy of the binary, plugins and the "
"config file in your jail (unless you can sacrifice graceful reload and "
"simply delegate the Emperor to respawn the instance)"
msgstr ""

#: ../../FreeBSDJails.rst:206
msgid ""
"Another approach is (like with devfs) mounting the directory with the "
"uwsgi binary (and the eventual plugins) in the jail itself and instruct "
"uWSGI to use this new path with --binary-path"
msgstr ""

#: ../../FreeBSDJails.rst:211
msgid "The jidfile"
msgstr ""

#: ../../FreeBSDJails.rst:213
msgid ""
"Each jail can be referenced by a unique name (optional) or its \"jid\". "
"This is similar to a \"pid\", as you can use it to send commands (and "
"updates) to an already running jail. The --jidfile <file> option allows "
"you to store the jid in a file for use with external applications."
msgstr ""

#: ../../FreeBSDJails.rst:218
msgid "Attaching to a jail"
msgstr ""

#: ../../FreeBSDJails.rst:220
msgid ""
"You can attach uWSGI instances to already running jails (they can be "
"standard persistent jail too) using --jail-attach <id>"
msgstr ""

#: ../../FreeBSDJails.rst:222
msgid "The id argument can be a jid or the name of the jail."
msgstr ""

#: ../../FreeBSDJails.rst:224
msgid "This feature requires FreeBSD 8"
msgstr ""

#: ../../FreeBSDJails.rst:227
msgid "Debian/kFreeBSD"
msgstr ""

#: ../../FreeBSDJails.rst:229
msgid ""
"This is an official Debian project aiming at building an os with FreeBSD "
"kernel and common Debian userspace."
msgstr ""

#: ../../FreeBSDJails.rst:231
msgid "It works really well, and it has support for jails too."
msgstr ""

#: ../../FreeBSDJails.rst:233
msgid "Let's create a jail with debootstrap"
msgstr ""

#: ../../FreeBSDJails.rst:239
msgid "add a network alias"
msgstr ""

#: ../../FreeBSDJails.rst:245
msgid "(change em0 with your network interface name)"
msgstr ""

#: ../../FreeBSDJails.rst:247
msgid "and run it"
msgstr ""

#: ../../FreeBSDJails.rst:255
msgid "Jails with Forkpty Router"
msgstr ""

#: ../../FreeBSDJails.rst:257
msgid "You can easily attach to FreeBSD jails with :doc:`ForkptyRouter`"
msgstr ""

#: ../../FreeBSDJails.rst:259
msgid ""
"Just remember to have /dev (well, /dev/ptmx) mounted in your jail to "
"allow the forkpty() call"
msgstr ""

#: ../../FreeBSDJails.rst:261
msgid "Learn how to deal with devfs_ruleset to increase security of your devfs"
msgstr ""

#: ../../FreeBSDJails.rst:265
msgid "Notes"
msgstr ""

#: ../../FreeBSDJails.rst:267
msgid "A jail is destroyed when the last process running in it dies"
msgstr ""

#: ../../FreeBSDJails.rst:269
msgid ""
"By default everything mounted under the rootfs (before entering the jail)"
" will be seen by the jail it self (we have seen it before when dealing "
"with devfs)"
msgstr ""

