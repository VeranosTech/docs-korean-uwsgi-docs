# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Tracebacker.rst:2
msgid "Python Tracebacker"
msgstr ""

#: ../../Tracebacker.rst:6
msgid ""
"Usually if you want to get a real-time traceback from your app you'd have"
" to modify your code to add a hook or entry point for that as described "
"on the :doc:`TipsAndTricks` page."
msgstr ""

#: ../../Tracebacker.rst:8
msgid ""
"Starting from 1.3-dev, uWSGI includes a similar technique allowing you to"
" get realtime traceback via a UNIX socket."
msgstr ""

#: ../../Tracebacker.rst:10
msgid ""
"To enable the tracebacker, add the option ``py-tracebacker=<socket>`` "
"where ``<socket>`` is the _basename_ for the created UNIX sockets."
msgstr ""

#: ../../Tracebacker.rst:12
msgid ""
"If you have 4 uWSGI workers and you add ``py-tracebacker=/tmp/tbsocket``,"
" four sockets named ``/tmp/tbsocket1`` through ``/tmp/tbsocket4`` will be"
" created."
msgstr ""

#: ../../Tracebacker.rst:14
msgid ""
"Connecting to one of them will return the current traceback of the "
"threads running in the worker. To connect to those sockets you can use "
"whatever application or method you like the best, but uWSGI includes a "
"convenience option ``connect-and-read`` you can use::"
msgstr ""

#: ../../Tracebacker.rst:19
msgid "An example"
msgstr ""

#: ../../Tracebacker.rst:21
msgid "Let's write a silly test application called ``slow.py``:"
msgstr ""

#: ../../Tracebacker.rst:47
msgid "And then run it::"
msgstr ""

#: ../../Tracebacker.rst:51
msgid "Then make a bunch of requests into it::"
msgstr ""

#: ../../Tracebacker.rst:58
msgid ""
"Now, while these requests are running (they'll take pretty much exactly a"
" minute to complete each), you can retrieve the traceback for, let's say,"
" the two first workers::"
msgstr ""

#: ../../Tracebacker.rst:63
msgid "The tracebacker output will be something like this::"
msgstr ""

#: ../../Tracebacker.rst:89
msgid "Combining the tracebacker with Harakiri"
msgstr ""

#: ../../Tracebacker.rst:91
msgid ""
"If a request is killed by the :term:`harakiri<Harakiri>` feature, a "
"traceback is automatically logged during the Harakiri phase."
msgstr ""

