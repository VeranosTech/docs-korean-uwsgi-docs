# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../FAQ.rst:2
msgid "Frequently Asked Questions (FAQ)"
msgstr ""

#: ../../FAQ.rst:5
msgid "Why should I choose uWSGI?"
msgstr ""

#: ../../FAQ.rst:7
msgid ""
"Because you can! :) uWSGI wants to be a complete web application "
"deployment solution with batteries included:"
msgstr ""

#: ../../FAQ.rst:10
msgid ":doc:`ProcessManagement`"
msgstr ""

#: ../../FAQ.rst:11
msgid "Management of long-running tasks"
msgstr ""

#: ../../FAQ.rst:12
msgid ":doc:`RPC`"
msgstr ""

#: ../../FAQ.rst:13
msgid ":doc:`Clustering`"
msgstr ""

#: ../../FAQ.rst:14
msgid ":doc:`LoadBalancing`"
msgstr ""

#: ../../FAQ.rst:15
msgid ":doc:`Monitoring`"
msgstr ""

#: ../../FAQ.rst:16
msgid ":doc:`ResourceLimiting`"
msgstr ""

#: ../../FAQ.rst:18
msgid ""
"... and many other annoying everyday tasks that you'd have to delegate to"
" external scripts and manual sysadmin tasks."
msgstr ""

#: ../../FAQ.rst:21
msgid ""
"If you are searching for a simple server for your WSGI, PSGI or Rack app,"
" uWSGI may not be for you. Though, if you are building an app which needs"
" to be rock solid, fast, and easy to distribute and optimize for various "
"loads, you will most likely find yourself needing uWSGI."
msgstr ""

#: ../../FAQ.rst:26
msgid ""
"The best definition for uWSGI is \"Swiss Army Knife for your network "
"applications\"."
msgstr ""

#: ../../FAQ.rst:29
msgid "What about the protocol?"
msgstr ""

#: ../../FAQ.rst:31
msgid ""
"The uwsgi (all lowercase) protocol is derived from SCGI but with binary "
"string length representations and a 4-byte header that includes the size "
"of the var block (16 bit length) and a couple of general-purpose bytes.  "
"We are not reinventing the wheel. Binary management is much easier and "
"cheaper than string parsing, and every single bit of power is required "
"for our projects. If you need proof, look at the :doc:`official protocol "
"documentation<Protocol>` and you will understand why a new protocol was "
"needed.  Obviously, you are free to use the other supported protocols. "
"Remember, if you cannot use uWSGI in some scenario, it is a uWSGI bug."
msgstr ""

#: ../../FAQ.rst:42
msgid "Can I use it in cluster environments?"
msgstr ""

#: ../../FAQ.rst:44
msgid ""
"Yes, this is one of the main features of the uWSGI stack.  You can have "
"multiple instances bound on different servers, and using the load "
"balancing facilities of your webserver/proxy/router you can distribute "
"your load. Systems like :doc:`RPC` allows you to fast call functions on "
"remote nodes, and :doc:`Legion` allows you to elect a master in a multi-"
"node setup."
msgstr ""

#: ../../FAQ.rst:51
msgid "So, why all those timeout configuration flags?"
msgstr ""

#: ../../FAQ.rst:53
msgid ""
"Choosing sane timeouts is the key to high availability.  Do not trust "
"network applications that do not permit you to choose a timeout."
msgstr ""

#: ../../FAQ.rst:57
msgid "I need help! What do I do?"
msgstr ""

#: ../../FAQ.rst:59
msgid "Post a message on the uWSGI mailing list including your"
msgstr ""

#: ../../FAQ.rst:61
msgid "Operating system version"
msgstr ""

#: ../../FAQ.rst:62
msgid "CPU architecture"
msgstr ""

#: ../../FAQ.rst:63
msgid "Webserver used (if any)"
msgstr ""

#: ../../FAQ.rst:64
msgid "uWSGI version"
msgstr ""

#: ../../FAQ.rst:65
msgid "uWSGI command line or config files"
msgstr ""

#: ../../FAQ.rst:67
msgid ""
"You should add the `--show-config` option and post the output in the "
"message. It will be very useful for finding out just what's wrong with "
"your uWSGI.  You can also :doc:`rebuild uWSGI<Build>` with debug symbols "
"and run it under a debugger like `gdb`."
msgstr ""

#: ../../FAQ.rst:72
msgid ""
"uWSGI is an enormous project with hundreds of options. You should be "
"prepared that not everything will go right at the first shot. Ask for "
"help, ask for help and ask for help. If you are frustrated, do not waste "
"time blaming and ranting - instead simply join the list and ask for help."
" This is open source, if you only rant you are doing nothing useful."
msgstr ""

#: ../../FAQ.rst:79
msgid "I am not a sysadmin, nor a UNIX guru. Can I use uWSGI?"
msgstr ""

#: ../../FAQ.rst:81
msgid ""
"That's a good question :) But sadly there is no simple answer.  uWSGI has"
" not been developed with simplicity in mind, but with versatility.  You "
"can try it by starting with one of the quickstarts and if you have "
"problems, simply ask for help in the list or on the IRC channel."
msgstr ""

#: ../../FAQ.rst:87
msgid "How can I buy commercial support for my company?"
msgstr ""

#: ../../FAQ.rst:89
msgid ""
"Send an email to info at unbit.it with the word \"uWSGI\" in the subject."
" The email you send should include your company information and your "
"specific request. We will reply as soon as possible."
msgstr ""

#: ../../FAQ.rst:94
msgid "Will this allow me to run my awesome apps on my ancient close-minded ISP?"
msgstr ""

#: ../../FAQ.rst:96
msgid "Probably not. The uWSGI server requires a modern platform/environment."
msgstr ""

#: ../../FAQ.rst:99
msgid "Where are the benchmarks?"
msgstr ""

#: ../../FAQ.rst:101
msgid ""
"Sorry, we only do \"official\" benchmarks for regression testing. If "
"benchmarks are very important to you, you can search on the mailing list,"
" make your own benchmarks or search on Google.  uWSGI gives precedence to"
" machine health, so do not expect your `ab` test with an unrealistic "
"number of concurrent connections to be managed flawlessly without tuning."
"  Some socket and networking knowledge is required if you want to make a "
"valid benchmark (and avoid geek rage in your blog comments ;).  Also "
"remember that uWSGI can be run in various modes, so avoid comparing it "
"configured in preforking mode with another server in non-blocking/async "
"mode if you do not want to look ridiculous."
msgstr ""

#: ../../FAQ.rst:114
msgid ""
"If you see your tests failing at higher concurrency rates you are "
"probably hitting your OS socket backlog queue limit (maximum of 128 slots"
" on Linux, tunable via `/proc/sys/net/somaxconn` and "
"`/proc/sys/net/ipv4/tcp_max_syn_backlog` for TCP sockets)."
msgstr ""

#: ../../FAQ.rst:119
msgid "You can set this value in uWSGI with the `listen` configuration option."
msgstr ""

#: ../../FAQ.rst:123
msgid "Ha! Server XXX is faster than uWSGI! Take that!"
msgstr ""

#: ../../FAQ.rst:125
msgid ""
"As already stated uWSGI is not a silver bullet, it is not meant to be "
"liked by the whole world and it is obviously not the fastest server out "
"there.  It is a piece of software following an \"approach\" to problems "
"you may not like or that you may conversely love. The approach taken will"
" work better for certain cases than others, and each application should "
"be analyzed on it's own merits using appropriate and accruate real-world "
"benchmarks."
msgstr ""

#: ../../FAQ.rst:133
msgid "What is 'Harakiri mode'?"
msgstr ""

#: ../../FAQ.rst:135
msgid ""
"At Unbit we host hundreds of unreliable web apps on our servers. All of "
"them run on hardly constrained (at kernel level) environments where "
"having processes block due to an implementation error will result in "
"taking down an entire site. The harakiri mode has two operational modes:"
msgstr ""

#: ../../FAQ.rst:140
msgid ""
"one that we define as \"raw and a bit unreliable\" (used for simple setup"
" without a process manager)"
msgstr ""

#: ../../FAQ.rst:141
msgid ""
"and another one that we define as \"reliable\" that depends on the "
"presence of the uWSGI process manager (see :doc:`ProcessManagement`)."
msgstr ""

#: ../../FAQ.rst:143
msgid ""
"The first one sets a simple alarm at the start of every request. If the "
"process gets a `SIGALRM` signal, it terminates itself. We call this "
"unreliable, because your app or some module you use could overwrite or "
"simply cancel the alarm with a simple call to `alarm()`."
msgstr ""

#: ../../FAQ.rst:148
msgid ""
"The second one uses a master process shared memory area (via `mmap`) that"
" maintains statistics on every worker in the pool. At the start of every "
"request, the worker sets a timestamp representing the time after which "
"the process will be killed in its dedicated area. This timestamp is "
"zeroed after every successful request. If the master process finds a "
"worker with a timestamp in the past it will mercilessly kill it."
msgstr ""

#: ../../FAQ.rst:156
msgid "Will my app run faster with uWSGI?"
msgstr ""

#: ../../FAQ.rst:158
msgid ""
"It's unlikely. The biggest bottleneck in web app deployment is the "
"application itself. If you want a faster environment, optimize your code "
"or use techniques such as clustering or caching. We say that uWSGI is "
"fast because it introduces a very little overhead in the deployment "
"structure."
msgstr ""

#: ../../FAQ.rst:164
msgid ""
"What are the most important options for performance and robustness in the"
" uWSGI environment?"
msgstr ""

#: ../../FAQ.rst:166
msgid ""
"By default, uWSGI is configured with sane \"almost-good-for-all\" values."
" But if and when things start going wild, tuning is a must."
msgstr ""

#: ../../FAQ.rst:169
msgid ""
"Increasing (or decreasing) timeout is important, as is modifying the "
"socket listen queue size."
msgstr ""

#: ../../FAQ.rst:170
msgid "Think about threading. If you do not need threads, do not enable them."
msgstr ""

#: ../../FAQ.rst:171
msgid ""
"If you are running only a single application you can disable multiple "
"interpreters."
msgstr ""

#: ../../FAQ.rst:172
msgid ""
"Always remember to enable the master process in production environments. "
"See :doc:`ProcessManagement`."
msgstr ""

#: ../../FAQ.rst:173
msgid ""
"Adding workers does not mean \"increasing performance\", so choose a good"
" value for the `workers` option based on the nature of your app (IO "
"bound, CPU bound, IO waiting...)"
msgstr ""

#: ../../FAQ.rst:178
msgid "Why not simply use HTTP as the protocol?"
msgstr ""

#: ../../FAQ.rst:180
msgid ""
"A good question with a simple answer: HTTP parsing is slow, really slow."
"  Why should we do a complex task twice? The web server has already "
"parsed the request! The :doc:`uwsgi protocol<Protocol>` is very simple to"
" parse for a machine, while HTTP is very easy to parse for a human.  As "
"soon as humans are being used as servers, we will abandon the uwsgi "
"protocol in favor of the HTTP protocol.  All this said, you can use uWSGI"
" via :doc:`HTTP`, :doc:`FastCGI`, :doc:`ZeroMQ` and other protocols as "
"well."
msgstr ""

#: ../../FAQ.rst:189
msgid "Why do you support multiple methods of configuration?"
msgstr ""

#: ../../FAQ.rst:191
msgid ""
"System administration is all about skills and taste. uWSGI tries to give "
"sysadmins as many choices as possible for integration with whatever "
"infrastructure is already available.  Having multiple methods of "
"configuration is just one way we achieve this."
msgstr ""

#: ../../FAQ.rst:197
msgid "What is the best webserver handler?"
msgstr ""

#: ../../FAQ.rst:199
msgid "See :doc:`WebServers`."
msgstr ""

