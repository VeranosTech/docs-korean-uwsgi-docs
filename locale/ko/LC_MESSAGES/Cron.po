# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Cron.rst:2
msgid "The uWSGI cron-like interface"
msgstr ""

#: ../../Cron.rst:4
msgid ""
"uWSGI's :term:`master` has an internal cron-like facility that can "
"generate events at predefined times.  You can use it"
msgstr ""

#: ../../Cron.rst:7
msgid "via the uWSGI API, in which case cron events will generate uWSGI signals"
msgstr ""

#: ../../Cron.rst:8
msgid "directly via options, in which case events will run shell commands"
msgstr ""

#: ../../Cron.rst:11
msgid "uWSGI signal based"
msgstr ""

#: ../../Cron.rst:13
msgid ""
"The :meth:`uwsgi.add_cron` function is the interface to the uWSGI signal "
"cron facility.  The syntax is"
msgstr ""

#: ../../Cron.rst:20
msgid ""
"The last 5 arguments work similarly to a standard crontab, but instead of"
" \"*\", use -1, and instead of \"\\*/2\", \"\\*/3\", etc. use -2 and -3, "
"etc."
msgstr ""

#: ../../Cron.rst:35
msgid "Timers vs. cron"
msgstr ""

#: ../../Cron.rst:37
msgid ""
"Recurring events not related to specific dates should use "
"timers/rb_timers. When you are interested in a specific date/hour use "
"cron."
msgstr ""

#: ../../Cron.rst:40 ../../Cron.rst:61
msgid "For example:"
msgstr ""

#: ../../Cron.rst:48
msgid "Notes"
msgstr ""

#: ../../Cron.rst:50
msgid "``day`` and ``weekday`` are ORed as the original crontab specifications."
msgstr ""

#: ../../Cron.rst:51
msgid ""
"By default, you can define up to 64 signal-based cron jobs per master. "
"This value may be increased in :file:`uwsgi.h`."
msgstr ""

#: ../../Cron.rst:55
msgid "Option-based cron"
msgstr ""

#: ../../Cron.rst:57
msgid ""
"You can define cron tasks directly in configuration with the ``cron`` "
"option. You can specify an unlimited number of option-based cron records."
" The syntax is the same of the signal-based ones."
msgstr ""

#: ../../Cron.rst:83
msgid "Legion crons"
msgstr ""

#: ../../Cron.rst:85
msgid ""
"When your instance is part of a :doc:`Legion`, you can configure it to "
"run crons only if it is the Lord of the specified Legion:"
msgstr ""

#: ../../Cron.rst:97
msgid "Unique crons"
msgstr ""

#: ../../Cron.rst:99
msgid "This feature is available since 1.9.11."
msgstr ""

#: ../../Cron.rst:102
msgid ""
"Some commands can take a long time to finish or just hang doing their "
"thing. Sometimes this is okay, but there are also cases when running "
"multiple instances of the same command can be dangerous."
msgstr ""

#: ../../Cron.rst:104
msgid ""
"For such cases the ``unique-cron`` and ``unique-legion-cron`` options "
"were added. The syntax is the same as with ``cron`` and ``legion-cron``, "
"but the difference is that uWSGI will keep track of execution state and "
"not execute the cronjob again until it is complete."
msgstr ""

#: ../../Cron.rst:106 ../../Cron.rst:144
msgid "Example:"
msgstr ""

#: ../../Cron.rst:113
msgid ""
"This would execute ``sleep 70`` every minute, but sleep command will be "
"running longer than our execution interval, we will end up with a growing"
" number of sleep processes. To fix this we can simply replace ``cron`` "
"with ``unique-cron`` and uWSGI will make sure that only single sleep "
"process is running. A new process will be started right after the "
"previous one finishes."
msgstr ""

#: ../../Cron.rst:117
msgid "Harakiri"
msgstr ""

#: ../../Cron.rst:119
msgid "Available since 1.9.11."
msgstr ""

#: ../../Cron.rst:121
msgid ""
"``--cron-harakiri`` will enforce a time limit on executed commands. If "
"any command is taking longer it will be killed."
msgstr ""

#: ../../Cron.rst:130
msgid ""
"This will kill the cron command after 10 seconds. Note that ``cron-"
"harakiri`` is a global limit, it affects all cron commands. To set a per-"
"command time limit, use the ``cron2`` option (see below)."
msgstr ""

#: ../../Cron.rst:133
msgid "New syntax for cron options"
msgstr ""

#: ../../Cron.rst:135
msgid "Available since 1.9.11"
msgstr ""

#: ../../Cron.rst:137
msgid "To allow better control over crons, a new option was added to uWSGI:"
msgstr ""

#: ../../Cron.rst:152
msgid "Will spawn an unique cron command ``sleep 130`` every 2 minutes."
msgstr ""

#: ../../Cron.rst:154
msgid "Option list is optional, available options for every cron:"
msgstr ""

#: ../../Cron.rst:156
msgid ""
"``minute`` - minute part of crontab entry, default is -1 (interpreted as "
"*)"
msgstr ""

#: ../../Cron.rst:157
msgid "``hour`` - hour part of crontab entry, default is -1 (interpreted as *)"
msgstr ""

#: ../../Cron.rst:158
msgid "``day`` - day part of crontab entry, default is -1 (interpreted as *)"
msgstr ""

#: ../../Cron.rst:159
msgid "``month`` - month part of crontab entry, default is -1 (interpreted as *)"
msgstr ""

#: ../../Cron.rst:160
msgid "``week`` - week part of crontab entry, default is -1 (interpreted as *)"
msgstr ""

#: ../../Cron.rst:161
msgid ""
"``unique`` - marks cron command as unique (see above), default is 0 (not "
"unique)"
msgstr ""

#: ../../Cron.rst:162
msgid ""
"``harakiri`` - set harakiri timeout (in seconds) for this cron command, "
"default is 0 (no harakiri)"
msgstr ""

#: ../../Cron.rst:163
msgid ""
"``legion`` - set legion name for use with this cron command, cron legions"
" are only executed on the legion lord node."
msgstr ""

#: ../../Cron.rst:165
msgid ""
"Note that you cannot use spaces in options list. (``minute=1, hour=2`` "
"will not work, but ``minute=1,hour=2`` will work just fine.) If any "
"option is missing, a default value is used."
msgstr ""

#: ../../Cron.rst:184
msgid ""
"This will disable harakiri for ``my command``, but other cron commands "
"will still be killed after 10 seconds:"
msgstr ""

