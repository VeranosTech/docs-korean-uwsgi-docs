# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../HTTPS.rst:2
msgid "HTTPS support (from 1.3)"
msgstr ""

#: ../../HTTPS.rst:4
msgid ""
"Use the ``https <socket>,<certificate>,<key>`` option. This option may be"
" specified multiple times. First generate your server key, certificate "
"signing request, and self-sign the certificate using the OpenSSL toolset:"
msgstr ""

#: ../../HTTPS.rst:8
msgid "You'll want a real SSL certificate for production use."
msgstr ""

#: ../../HTTPS.rst:16
msgid "Then start the server using the SSL certificate and key just generated::"
msgstr ""

#: ../../HTTPS.rst:20
msgid ""
"As port 443, the port normally used by HTTPS, is privileged (ie. non-root"
" processes may not bind to it), you can use the shared socket mechanism "
"and drop privileges after binding like thus::"
msgstr ""

#: ../../HTTPS.rst:26
msgid ""
"uWSGI will bind to 443 on any IP, then drop privileges to those of "
"``roberto``, and use the shared socket 0 (``=0``) for HTTPS."
msgstr ""

#: ../../HTTPS.rst:29
msgid "The =0 syntax is currently undocumented."
msgstr ""

#: ../../HTTPS.rst:31
msgid ""
"In order to use `https` option be sure that you have OpenSSL development "
"headers installed (e.g. libssl-dev on Debian). Install them and rebuild "
"uWSGI so the build system will automatically detect it."
msgstr ""

#: ../../HTTPS.rst:36
msgid "Setting SSL/TLS ciphers"
msgstr ""

#: ../../HTTPS.rst:38
msgid ""
"The ``https`` option takes an optional fourth argument you can use to "
"specify the OpenSSL cipher suite."
msgstr ""

#: ../../HTTPS.rst:53
msgid ""
"This will set all of the **HIGHest** ciphers (whenever possible) for your"
" SSL/TLS transactions."
msgstr ""

#: ../../HTTPS.rst:57
msgid "Client certificate authentication"
msgstr ""

#: ../../HTTPS.rst:59
msgid ""
"The ``https`` option can also take an optional 5th argument. You can use "
"it to specify a CA certificate to authenticate your clients with. "
"Generate your CA key and certificate (this time the key will be 4096 bits"
" and password-protected)::"
msgstr ""

#: ../../HTTPS.rst:67
msgid "Generate the server key and CSR (as before)::"
msgstr ""

#: ../../HTTPS.rst:72
msgid "Sign the server certificate with your new CA::"
msgstr ""

#: ../../HTTPS.rst:76
msgid ""
"Create a key and a CSR for your client, sign it with your CA and package "
"it as PKCS#12. Repeat these steps for each client."
msgstr ""

#: ../../HTTPS.rst:87
msgid "Then configure uWSGI for certificate client authentication"
msgstr ""

#: ../../HTTPS.rst:99
msgid ""
"If you don't want the client certificate authentication to be mandatory, "
"remove the '!' before ca.crt in the https options."
msgstr ""

