# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Fastrouter.rst:2
msgid "The uWSGI FastRouter"
msgstr ""

#: ../../Fastrouter.rst:4
msgid ""
"For advanced setups uWSGI includes the \"fastrouter\" plugin, a proxy"
"/load-balancer/router speaking the uwsgi protocol. It is built in by "
"default.  You can put it between your webserver and real uWSGI instances "
"to have more control over the routing of HTTP requests to your "
"application servers."
msgstr ""

#: ../../Fastrouter.rst:11
msgid "Getting started"
msgstr ""

#: ../../Fastrouter.rst:13
msgid ""
"First of all you have to run the fastrouter, binding it to a specific "
"address. Multiple addresses are supported as well."
msgstr ""

#: ../../Fastrouter.rst:20
msgid "This is the most useless Fastrouter setup in the world."
msgstr ""

#: ../../Fastrouter.rst:22
msgid ""
"Congratulations! You have just run the most useless Fastrouter setup in "
"the world. Simply binding the fastrouter to a couple of addresses will "
"not instruct it on how to route requests. To give it intelligence you "
"have to tell it how to route requests."
msgstr ""

#: ../../Fastrouter.rst:28
msgid "Way 1: --fastrouter-use-base"
msgstr ""

#: ../../Fastrouter.rst:30
msgid ""
"This option will tell the fastrouter to connect to a UNIX socket with the"
" same name of the requested host in a specified directory."
msgstr ""

#: ../../Fastrouter.rst:37
msgid ""
"If you receive a request for ``example.com`` the fastrouter will forward "
"the request to ``/tmp/sockets/example.com``."
msgstr ""

#: ../../Fastrouter.rst:41
msgid "Way 2: --fastrouter-use-pattern"
msgstr ""

#: ../../Fastrouter.rst:43
#, python-format
msgid ""
"Same as the previous setup but you will be able to use a pattern, with "
"``%s`` mapping to the requested key/hostname."
msgstr ""

#: ../../Fastrouter.rst:50
msgid ""
"Requests for ``example.com`` will be mapped to "
"``/tmp/sockets/example.com/uwsgi.sock``."
msgstr ""

#: ../../Fastrouter.rst:54
msgid "Way 3: --fastrouter-use-cache"
msgstr ""

#: ../../Fastrouter.rst:56
msgid ""
"You can store the key/value mappings in the :doc:`uWSGI cache <Caching>`."
" Choose a way to fill the cache, for instance a Python script like "
"this..."
msgstr ""

#: ../../Fastrouter.rst:67
msgid ""
"Then run your Fastrouter-enabled server, telling it to run the script "
"first."
msgstr ""

#: ../../Fastrouter.rst:74
msgid "Way 4: --fastrouter-subscription-server"
msgstr ""

#: ../../Fastrouter.rst:76
msgid ""
"This is probably one of the best way for massive auto-scaling hosting. It"
" uses the :doc:`subscription server <SubscriptionServer>` to allow "
"instances to announce themselves and subscribe to the fastrouter."
msgstr ""

#: ../../Fastrouter.rst:84
msgid "This will spawn a subscription server on address 192.168.0.100 port 7000"
msgstr ""

#: ../../Fastrouter.rst:86
msgid "Now you can spawn your instances subscribing to the fastrouter:"
msgstr ""

#: ../../Fastrouter.rst:93
msgid ""
"As you probably noted, you can subscribe to multiple fastrouters, with "
"multiple keys. Multiple instances subscribing to the same fastrouter with"
" the same key will automatically get load balanced and monitored. Handy, "
"isn't it?  Like with the caching key/value store, ``modifier1`` can be "
"set with a comma. (``,5`` above) Another feature of the subscription "
"system is avoiding to choose ports. You can bind instances to random port"
" and the subscription system will send the real value to the subscription"
" server."
msgstr ""

#: ../../Fastrouter.rst:107
msgid "Mapping files"
msgstr ""

#: ../../Fastrouter.rst:109
msgid ""
"If you need to specify a massive amount of keys, you can use a mapping "
"file instead."
msgstr ""

#: ../../Fastrouter.rst:125
msgid "Way 5: --fastrouter-use-code-string"
msgstr ""

#: ../../Fastrouter.rst:127
msgid ""
"If Darth Vader wears a t-shirt with your face (and in some other corner "
"cases too), you can customize the fastrouter with code-driven mappings.  "
"Choose a uWSGI-supported language (like Python or Lua) and define your "
"mapping function."
msgstr ""

#: ../../Fastrouter.rst:140
msgid ""
"This will instruct the fastrouter to load the script ``mapper.py`` using "
"plugin (modifier1) 0 and call the 'get' global, passing it the key.  In "
"the previous example you will always route requests to 127.0.0.1:3031. "
"Let's create a more advanced system, for fun!"
msgstr ""

#: ../../Fastrouter.rst:175
msgid ""
"With only few lines we have implemented round-robin load-balancing with a"
" fallback node. Pow!  You could add some form of node monitoring, "
"starting threads in the script, or other insane things. (Be sure to add "
"them to the docs!)"
msgstr ""

#: ../../Fastrouter.rst:180
msgid ""
"Remember to not put blocking code in your functions. The fastrouter is "
"totally non-blocking, do not ruin it!"
msgstr ""

#: ../../Fastrouter.rst:184
msgid "Cheap mode and shared sockets"
msgstr ""

#: ../../Fastrouter.rst:186
msgid ""
"A common setup is having a webserver/proxy connected to a fastrouter and "
"a series of uWSGI instances subscribed to it.  Normally you'd use the "
"webserver node as a uWSGI instance node. This node will subscribe to the "
"local fastrouter. Well... don't waste cycles on that!  Shared sockets are"
" a way to share sockets among various uWSGI components. Let's use that to"
" share a socket between the fastrouter and uWSGI instance."
msgstr ""

#: ../../Fastrouter.rst:216
msgid ""
"With this setup your requests will go directly to your app (no proxy "
"overhead) or to the fastrouter (to pass requests to remote nodes).  When "
"the fastrouter is in cheap mode, it will not respond to requests until a "
"node is available. This means that when there are no nodes subscribed, "
"only your local app will respond.  When all of the nodes go down, the "
"fastrouter will return in cheap mode. Seeing a pattern? Another step to "
"awesome autoscaling."
msgstr ""

#: ../../Fastrouter.rst:225
msgid "Post-buffering mode (uWSGI >= 2.0.9)"
msgstr ""

#: ../../Fastrouter.rst:227
msgid ""
"The fastrouter is (by default) a streaming proxy. This means that as soon"
" as the uwsgi packet (read: the request headers) is parsed, it is "
"forwarded to the backend/backends."
msgstr ""

#: ../../Fastrouter.rst:229
msgid ""
"Now, if your web-proxy is a streaming-one too (like apache, or the uWSGI "
"http router), your app could be blocked for ages in case of a request "
"with a body. To be more clear:"
msgstr ""

#: ../../Fastrouter.rst:231
msgid "the client starts the request sending http headers"
msgstr ""

#: ../../Fastrouter.rst:232
msgid "the web proxy receives it and send to the fastrouter"
msgstr ""

#: ../../Fastrouter.rst:233
msgid "the fastrouter receives it and send to the backend"
msgstr ""

#: ../../Fastrouter.rst:234
msgid "the client starts sending chunks of the request body (like a file upload)"
msgstr ""

#: ../../Fastrouter.rst:235
msgid "the web proxy receives them and forward to the fastrouter"
msgstr ""

#: ../../Fastrouter.rst:236
msgid "the fastrouter receives them and forward to the backend and so on"
msgstr ""

#: ../../Fastrouter.rst:238
msgid ""
"now, imagine 10 concurrent clients doing this thing and you will end with"
" 10 application server workers (or threads) busy for un undefined amount "
"of time. (note: this problem is amplified by the fact that generally the "
"number of threads/process is very limited, even in async modes you have a"
" limited of concurrent requests but it is generally so high that the "
"problem is not so relevant)"
msgstr ""

#: ../../Fastrouter.rst:240
msgid ""
"Web-proxies like nginx are \"buffered\", so they wait til the whole "
"request (and its body) has been read, and then it sends it to the "
"backends."
msgstr ""

#: ../../Fastrouter.rst:242
msgid ""
"You can instruct the fastrouter to behave like nginx with the "
"``--fastrouter-post-buffering <n>`` option, where <n> is the size of the "
"request body after which the body will be stored to disk (as a temporary "
"file) instead of memory:"
msgstr ""

#: ../../Fastrouter.rst:251
msgid ""
"will put the fastrouter in buffered mode, storing on a temp file every "
"body bigger than 8192 bytes, and on memory everything lower (or equal)"
msgstr ""

#: ../../Fastrouter.rst:253
msgid ""
"Remember that post-buffering, is not a good-for-all solution (otherwise "
"it would be the default), enabling it breaks websockets, chunked input, "
"upload progress, iceast streaming and so on. Enable it only when needed."
msgstr ""

#: ../../Fastrouter.rst:256
msgid "Notes"
msgstr ""

#: ../../Fastrouter.rst:258
msgid ""
"The fastrouter uses the following vars (in order of precedence) to choose"
" a key to use:"
msgstr ""

#: ../../Fastrouter.rst:260
msgid ""
"``UWSGI_FASTROUTER_KEY`` - the most versatile, as it doesn't depend on "
"the request in any way"
msgstr ""

#: ../../Fastrouter.rst:261
msgid "``HTTP_HOST``"
msgstr ""

#: ../../Fastrouter.rst:262
msgid "``SERVER_NAME``"
msgstr ""

#: ../../Fastrouter.rst:264
msgid ""
"You can increase the number of async events the fastrouter can manage (by"
" default it is system-dependent) using --fastrouter-events"
msgstr ""

#: ../../Fastrouter.rst:267
msgid ""
"You can change the default timeout with --fastrouter-timeout By default "
"the fastrouter will set fd socket passing when used over unix sockets. If"
" you do not want it add --no-fd-passing"
msgstr ""

