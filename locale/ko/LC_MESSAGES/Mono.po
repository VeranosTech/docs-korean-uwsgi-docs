# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Mono.rst:2
msgid "The Mono ASP.NET plugin"
msgstr ""

#: ../../Mono.rst:4
msgid ""
"uWSGI 1.9 added support for the Mono platform, especially for the ASP.NET"
" infrastructure."
msgstr ""

#: ../../Mono.rst:6
msgid ""
"The most common way to deploy Mono ASP.NET applications is with the XSP "
"project, a simple web server gateway implementing HTTP and FastCGI "
"protocols."
msgstr ""

#: ../../Mono.rst:9
msgid ""
"With the Mono plugin you will be able to host ASP.net applications "
"directly in uWSGI, gaining all of its features in your application for "
"free."
msgstr ""

#: ../../Mono.rst:11
msgid ""
"As all of the other uWSGI plugin you can call functions exported from the"
" other languages using the :doc:`RPC` subsystem."
msgstr ""

#: ../../Mono.rst:14
msgid "Building uWSGI + Mono"
msgstr ""

#: ../../Mono.rst:16
msgid "You can build Mono support as a plugin or in a monolithic build."
msgstr ""

#: ../../Mono.rst:18
msgid ""
"A build profile named \"mono\" is available, making the task pretty "
"simple."
msgstr ""

#: ../../Mono.rst:20
msgid ""
"Be sure to have mono installed in your system. You need the Mono headers,"
" the ``mcs`` compiler and the System.Web assembly. They are available in "
"standard mono distributions."
msgstr ""

#: ../../Mono.rst:22
msgid "On recent Debian/Ubuntu systems you can use"
msgstr ""

#: ../../Mono.rst:28
msgid ""
"``mono-xsp4`` is a trick to install all we need in a single shot, as "
"ASP.net examples will be used for testing our setup."
msgstr ""

#: ../../Mono.rst:30
msgid "We can build a monolithic uWSGI distribution with Mono embedded:"
msgstr ""

#: ../../Mono.rst:36
msgid ""
"At the end of the procedure (if all goes well) you will get the path to "
"the ``uwsgi.dll`` assembly."
msgstr ""

#: ../../Mono.rst:38
msgid ""
"You may want to install it in your GAC (with gacutil -i <path>) to avoid "
"specifying its path every time. This library allows access to the uWSGI "
"api from Mono applications."
msgstr ""

#: ../../Mono.rst:41
msgid "Starting the server"
msgstr ""

#: ../../Mono.rst:43
msgid "The Mono plugin has an official ``modifier1``, 15."
msgstr ""

#: ../../Mono.rst:53
msgid ""
"The previous setup assumes uwsgi.dll has been installed in the GAC, if it"
" is not your case you can force its path with:"
msgstr ""

#: ../../Mono.rst:64
msgid ""
"``/usr/share/asp.net-demos`` is the directory containing Mono's example "
"ASP.net applications."
msgstr ""

#: ../../Mono.rst:66
msgid ""
"If starting uWSGI you get an error about not being able to find "
"uwsgi.dll, you can enforce a specific search path with"
msgstr ""

#: ../../Mono.rst:78
msgid ""
"Or you can simply copy uwsgi.dll into the ``/bin`` directory of your site"
" directory (``/usr/share/asp.net-demos`` in this case)."
msgstr ""

#: ../../Mono.rst:80
msgid ""
"The ``mono-index`` option is used to set the file to search when a "
"directory is requested. You can specify it multiple times."
msgstr ""

#: ../../Mono.rst:83
msgid "Under the hood: the mono key"
msgstr ""

#: ../../Mono.rst:85
msgid ""
"The previous example should have worked flawlessly, but internally lot of"
" assumptions have been made."
msgstr ""

#: ../../Mono.rst:87
msgid ""
"The whole mono plugin relies on the \"key\" concept. A key is a unique "
"identifier for a .net application. In the example case the key for the "
"application is \"/usr/share/asp.net-demos\". This is a case where the key"
" maps 1:1 with the virtualhost map. To map a virtualhost path to a "
"specific key you can use the form"
msgstr ""

#: ../../Mono.rst:97
msgid "now the /foobar key maps to the /usr/share/asp.net-demos .net app."
msgstr ""

#: ../../Mono.rst:99
msgid ""
"By default the requested key is mapped to the DOCUMENT_ROOT variable. So "
"in this new case /foobar should be the DOCUMENT_ROOT value."
msgstr ""

#: ../../Mono.rst:101
msgid ""
"But the uWSGI http router has no concept of DOCUMENT_ROOT so how the "
"previous example could work ? This is because the first loaded app is "
"generally the default one, so the mono plugin, being not able to find an "
"app returned the default one."
msgstr ""

#: ../../Mono.rst:104
msgid ""
"Using DOCUMENT_ROOT as the key could be quite limiting. So the --mono-key"
" option is available. Let's build a massive virtualhosting stack using "
"uWSGI internal routing"
msgstr ""

#: ../../Mono.rst:114
msgid ""
"MONO_APP is not the variable the mono plugin will search for applications"
" (instead of DOCUMENT_ROOT)."
msgstr ""

#: ../../Mono.rst:116
msgid ""
"Thanks to internal routing we set it (dynamically) to the path of host-"
"specific application root, so a request to example.com will map to "
"/var/www/asp/example.com"
msgstr ""

#: ../../Mono.rst:121
msgid "Concurrency and fork() unfriendliness"
msgstr ""

#: ../../Mono.rst:123
msgid ""
"As the Mono VM is not ``fork()`` friendly, a new VM is spawned for each "
"worker. This ensures you can run your application in multiprocessing "
"mode."
msgstr ""

#: ../../Mono.rst:125
msgid ""
"Mono has really solid multithreading support and it works great with "
"uWSGI's thread support."
msgstr ""

#: ../../Mono.rst:141
msgid ""
"With this setup you will spawn 4 processes each with 20 threads. Try to "
"not rely on a single process. Albeit it is a common setup in the so-"
"called \"Enterprise environments\", having multiple processes ensures you"
" greater availability (thanks to the master work). This rule (as an "
"example) applies even to the :doc:`JVM` plugin."
msgstr ""

#: ../../Mono.rst:145
msgid "API access"
msgstr ""

#: ../../Mono.rst:147
msgid ""
"This is a work in progress. Currently only a couple of functions are "
"exported. High precedence will be given to the :doc:`RPC` and Signal "
"subsystem and to the :doc:`Caching` framework."
msgstr ""

#: ../../Mono.rst:150
msgid "Tricks"
msgstr ""

#: ../../Mono.rst:152
msgid ""
"As always uWSGI tries to optimize (where possible) the \"common\" "
"operations of your applications. Serving static files is automatically "
"accelerated (or offloaded if offloading is enabled) and all of the path "
"resolutions are cached."
msgstr ""

