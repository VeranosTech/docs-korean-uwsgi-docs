# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../PythonModuleAlias.rst:2
msgid "Aliasing Python modules"
msgstr ""

#: ../../PythonModuleAlias.rst:4
msgid "Having multiple version of a Python package/module/file is very common."
msgstr ""

#: ../../PythonModuleAlias.rst:6
msgid ""
"Manipulating PYTHONPATH or using virtualenvs are a way to use various "
"versions without changing your code."
msgstr ""

#: ../../PythonModuleAlias.rst:8
msgid ""
"But hey, why not have an aliasing system that lets you arbitrarily map "
"module names to files? That's why we have the ``pymodule-alias`` option!"
msgstr ""

#: ../../PythonModuleAlias.rst:12
msgid "Case 1 - Mapping a simple file to a virtual module"
msgstr ""

#: ../../PythonModuleAlias.rst:14
msgid ""
"Let's say we have ``swissknife.py`` that contains lots of useful classes "
"and functions."
msgstr ""

#: ../../PythonModuleAlias.rst:16
msgid ""
"It's imported in gazillions of places in your app. Now, we'll want to "
"modify it, but keep the original file intact for whichever reason, and "
"call it ``swissknife_mk2``."
msgstr ""

#: ../../PythonModuleAlias.rst:18
msgid "Your options would be"
msgstr ""

#: ../../PythonModuleAlias.rst:20
msgid ""
"to modify all of your code to import and use swissknife_mk2 instead of "
"swissknife. Yeah, no, not's going to happen."
msgstr ""

#: ../../PythonModuleAlias.rst:21
msgid ""
"modify the first line of all your files to read ``import swissknife_mk2 "
"as swissknife``. A lot better but you make software for money... and time"
" is money, so why the fuck not use something more powerful?"
msgstr ""

#: ../../PythonModuleAlias.rst:23
msgid "So don't touch your files -- just remap!"
msgstr ""

#: ../../PythonModuleAlias.rst:34
msgid "You can specify multiple ``pymodule-alias`` directives."
msgstr ""

#: ../../PythonModuleAlias.rst:46
msgid "Case 2 - mapping a packages to directories"
msgstr ""

#: ../../PythonModuleAlias.rst:48
msgid ""
"You have this shiny, beautiful Django project and something occurs to "
"you: Would it work with Django trunk? On to set up a new virtualenv... "
"nah. Let's just use ``pymodule-alias``!"
msgstr ""

#: ../../PythonModuleAlias.rst:56
msgid "Case 3 - override specific submodules"
msgstr ""

#: ../../PythonModuleAlias.rst:58
msgid ""
"You have a Werkzeug project where you want to override - for whichever "
"reason - ``werkzeug.test_app`` with one of your own devising. Easy, of "
"course!"
msgstr ""

