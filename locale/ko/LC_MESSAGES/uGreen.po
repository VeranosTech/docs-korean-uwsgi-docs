# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../uGreen.rst:2
msgid "uGreen -- uWSGI Green Threads"
msgstr ""

#: ../../uGreen.rst:4
msgid ""
"uGreen is an implementation of `green threads`_ on top of the :doc:`uWSGI"
" async platform<Async>`."
msgstr ""

#: ../../uGreen.rst:6
msgid ""
"It is very similar to Python's greenlet but built on top of the POSIX "
"``swapcontext()`` function. To take advantage of uGreen you have to set "
"the number of async cores that will be mapped to green threads."
msgstr ""

#: ../../uGreen.rst:8
msgid "For example if you want to spawn 30 green threads:"
msgstr ""

#: ../../uGreen.rst:14
msgid "The ``ugreen`` option will enable uGreen on top of async mode."
msgstr ""

#: ../../uGreen.rst:16
msgid ""
"Now when you call :py:func:`uwsgi.suspend` in your app, you'll be "
"switched off to another green thread."
msgstr ""

#: ../../uGreen.rst:21
msgid "Security and performance"
msgstr ""

#: ../../uGreen.rst:23
msgid ""
"To ensure (relative) isolation of green threads, every stack area is "
"protected by so called \"guard pages\"."
msgstr ""

#: ../../uGreen.rst:25
msgid ""
"An attempt to write out of the stack area of a green thread will result "
"in a segmentation fault/bus error (and the process manager, if enabled, "
"will respawn the worker without too much damage)."
msgstr ""

#: ../../uGreen.rst:27
msgid "The context switch is very fast, we can see it as:"
msgstr ""

#: ../../uGreen.rst:29
msgid "On switch"
msgstr ""

#: ../../uGreen.rst:31
msgid "Save the Python Frame pointer"
msgstr ""

#: ../../uGreen.rst:32
msgid "Save the recursion depth of the Python environment (it is simply an int)"
msgstr ""

#: ../../uGreen.rst:33
msgid "Switch to the main stack"
msgstr ""

#: ../../uGreen.rst:35
msgid "On return"
msgstr ""

#: ../../uGreen.rst:37
msgid "Re-set the uGreen stack"
msgstr ""

#: ../../uGreen.rst:38
msgid "Re-set the recursion depth"
msgstr ""

#: ../../uGreen.rst:39
msgid "Re-set the frame pointer"
msgstr ""

#: ../../uGreen.rst:41
msgid ""
"The stack/registers switch is done by the POSIX ``swapcontext()`` call "
"and we don't have to worry about it."
msgstr ""

#: ../../uGreen.rst:45
msgid "Async I/O"
msgstr ""

#: ../../uGreen.rst:47
msgid ""
"For managing async I/O you can use the Async mode FD wait functions "
":py:func:`uwsgi.wait_fd_read` and :py:func:`uwsgi.wait_fd_write`."
msgstr ""

#: ../../uGreen.rst:50
msgid "Stack size"
msgstr ""

#: ../../uGreen.rst:52
msgid ""
"You can choose the uGreen stack size using the ``ugreen-stacksize "
"<pages>`` option. The argument is in pages, not bytes."
msgstr ""

#: ../../uGreen.rst:55
msgid "Is this better than Greenlet or Stackless Python?"
msgstr ""

#: ../../uGreen.rst:57
msgid ""
"Weeeeelll... it depends. uGreen is faster (the stack is preallocated) but"
" requires more memory (to allocate a stack area for every core). "
"Stackless and Greenlet probably require less memory... but Stackless "
"requires a heavily patched version of Python."
msgstr ""

#: ../../uGreen.rst:59
msgid ""
"If you're heavily invested in making your app as async-snappy as "
"possible, it's always best to do some tests to choose the best one for "
"you. As far as uWSGI is concerned, you can move from async engine to "
"another without changing your code."
msgstr ""

#: ../../uGreen.rst:62
msgid "What about ``python-coev``?"
msgstr ""

#: ../../uGreen.rst:64
msgid ""
"Lots of uGreen has been inspired by it. The author's way to map Python "
"threads to their implementation allows ``python-coev`` to be a little "
"more \"trustworthy\" than Stackless Python. However, like Stackless, it "
"requires a patched version of Python... :("
msgstr ""

#: ../../uGreen.rst:67
msgid "Can I use uGreen to write Comet apps?"
msgstr ""

#: ../../uGreen.rst:69
msgid ""
"Yeah! Sure! Go ahead. In the distribution you will find the "
"``ugreenchat.py`` script. It is a simple/dumb multiuser Comet chat. If "
"you want to test it (for example 30 users) run it with"
msgstr ""

#: ../../uGreen.rst:75
msgid ""
"The code has comments for every ugreen-related line. You'll need "
"`Bottle`_, an amazing Python web micro framework to use it."
msgstr ""

#: ../../uGreen.rst:80
msgid "Psycopg2 improvements"
msgstr ""

#: ../../uGreen.rst:82
msgid ""
"uGreen can benefit from the new psycopg2 async extensions and the "
"psycogreen project. See the :file:`tests/psycopg2_green.py` and "
":file:`tests/psycogreen_green.py` files for examples."
msgstr ""

