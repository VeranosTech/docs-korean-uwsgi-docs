# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../HTTP.rst:2
msgid "Native HTTP support"
msgstr ""

#: ../../HTTP.rst:11
msgid "HTTP sockets"
msgstr ""

#: ../../HTTP.rst:13
msgid ""
"The ``http-socket <bind>`` option will make uWSGI natively speak HTTP.  "
"If your web server does not support the :doc:`uwsgi protocol <Protocol>` "
"but is able to speak to upstream HTTP proxies, or if you are using a "
"service like Webfaction or Heroku to host your application, you can use "
"``http-socket``.  If you plan to expose your app to the world with uWSGI "
"only, use the ``http`` option instead, as the router/proxy/load-balancer "
"will then be your shield."
msgstr ""

#: ../../HTTP.rst:21
msgid "The uWSGI HTTP/HTTPS router"
msgstr ""

#: ../../HTTP.rst:23
msgid ""
"uWSGI includes an HTTP/HTTPS router/proxy/load-balancer that can forward "
"requests to uWSGI workers.  The server can be used in two ways: embedded "
"and standalone.  In embedded mode, it will automatically spawn workers "
"and setup the communication socket. In standalone mode you have to "
"specify the address of a uwsgi socket to connect to."
msgstr ""

#: ../../HTTP.rst:29
msgid "Embedded mode::"
msgstr ""

#: ../../HTTP.rst:33
msgid ""
"This will spawn a HTTP server on port 8080 that forwards requests to a "
"pool of 4 uWSGI workers managed by the master process."
msgstr ""

#: ../../HTTP.rst:36
msgid "Standalone mode::"
msgstr ""

#: ../../HTTP.rst:40
msgid ""
"This will spawn a HTTP router (governed by a master for your safety) that"
" will forward requests to the uwsgi socket ``/tmp/uwsgi.sock``. You can "
"bind to multiple addresses/ports."
msgstr ""

#: ../../HTTP.rst:56
msgid "And load-balance to multiple nodes:"
msgstr ""

#: ../../HTTP.rst:74
msgid ""
"If you want to go massive (virtualhosting and zero-conf scaling) combine "
"the HTTP router with the :doc:`SubscriptionServer`."
msgstr ""

#: ../../HTTP.rst:76
msgid ""
"You can make the HTTP server pass custom uwsgi variables to workers with "
"the ``http-var KEY=VALUE`` option."
msgstr ""

#: ../../HTTP.rst:78
msgid ""
"You can use the ``http-modifier1`` option to pass a custom `modifier1` "
"value to workers."
msgstr ""

#: ../../HTTP.rst:82
msgid "HTTPS support"
msgstr ""

#: ../../HTTP.rst:84
msgid "see :doc:`HTTPS`"
msgstr ""

#: ../../HTTP.rst:87
msgid "HTTP Keep-Alive"
msgstr ""

#: ../../HTTP.rst:89
msgid ""
"If your backends set the correct HTTP headers, you can use the ``http-"
"keepalive`` option.  Your backends must either set a valid ``Content-"
"Length`` in each response, or you can use chunked encoding with ``http-"
"auto-chunked``. Simply setting \"Connection: close\" is *not enough*."
msgstr ""

#: ../../HTTP.rst:94
msgid ""
"Also remember to set \"Connection: Keep-Alive\" in your response. You can"
" automate that using the ``add-header = Connection: Keep-Alive`` option."
msgstr ""

#: ../../HTTP.rst:97
msgid ""
"Since uWSGI 2.1 (master branch) you can use the ``http11-socket`` option."
" ``http11-socket`` may replace the ``add-header`` and ``http-keepalive`` "
"options (but it doesn't touch tcp stuff as ``so-keepalive`` does). Once "
"set the server will try to maintain the connection opened if a bunch of "
"rules are respected. This is not a smart http 1.1 parser (to avoid "
"parsing the whole response) but assumes the developer is generating the "
"right headers. ``http11-socket`` has been added to support RTSP protocol "
"for video streaming."
msgstr ""

#: ../../HTTP.rst:106
msgid "HTTP auto gzip"
msgstr ""

#: ../../HTTP.rst:108
msgid ""
"With the ``http-auto-gzip`` option, uWSGI can automatically gzip content "
"if the ``uWSGI-Encoding`` header is set to `gzip` while ``Content-"
"Length`` and ``Content-Encoding`` are not set."
msgstr ""

#: ../../HTTP.rst:113
msgid "Can I use uWSGI's HTTP capabilities in production?"
msgstr ""

#: ../../HTTP.rst:115
msgid ""
"If you need a load balancer/proxy it can be a very good idea. It will "
"automatically find new uWSGI instances and can load balance in various "
"ways. If you want to use it as a real webserver you should take into "
"account that serving static files in uWSGI instances is possible, but not"
" as good as using a dedicated full-featured web server.  If you host "
"static assets in the cloud or on a CDN, using uWSGI's HTTP capabilities "
"you can definitely avoid configuring a full webserver."
msgstr ""

#: ../../HTTP.rst:123
msgid ""
"If you use Amazon's ELB (Elastic Load Balancer) in HTTP mode in front of "
"uWSGI in HTTP mode, either a valid ``Content-Length`` *must be set* by "
"the backend, or chunked encoding must be used, e.g., with ``http-auto-"
"chunked``. The ELB \"health test\" may still fail in HTTP mode "
"regardless, in which case a TCP health test can be used instead."
msgstr ""

#: ../../HTTP.rst:129
msgid ""
"In particular, the Django backend does not set ``Content-Length`` by "
"default, while most others do. If running behind ELB, either use chunked "
"encoding as above, or force Django to specify ``Content-Length`` with the"
" ``CommonMiddleware`` (``ConditionalGetMiddleware`` in Django < 1.11)"
msgstr ""

