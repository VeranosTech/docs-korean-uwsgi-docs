# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../JWSGI.rst:2
msgid "The JWSGI interface"
msgstr ""

#: ../../JWSGI.rst:4
msgid ""
"JWSGI is not a standard. Yet. If you like JWSGI, why not send an RFC to "
"the uWSGI mailing list. We have no specific interest in a standard, but "
"who knows..."
msgstr ""

#: ../../JWSGI.rst:6
msgid "JWSGI is a port of the WSGI/PSGI/Rack way of thinking for Java."
msgstr ""

#: ../../JWSGI.rst:8
msgid ""
"If, for some obscure reason, you'd feel like developing apps with JVM "
"languages and you don't feel like deploying a huge servlet stack, JWSGI "
"should be up your alley."
msgstr ""

#: ../../JWSGI.rst:12
msgid ""
"It is a very simple protocol: you call a public method that takes a "
"``HashMap`` as its sole argument.  This HashMap contains CGI style "
"variables and ``jwsgi.input`` containing a Java InputStream object."
msgstr ""

#: ../../JWSGI.rst:16
msgid "The function has to returns an array of 3 Objects:"
msgstr ""

#: ../../JWSGI.rst:18
msgid "``status`` (java.lang.Integer) (example: 200)"
msgstr ""

#: ../../JWSGI.rst:19
msgid ""
"``headers`` (HashMap) (example: {\"Content-type\": \"text/html\", "
"\"Server\": \"uWSGI\", \"Foo\": [\"one\",\"two\"]})"
msgstr ""

#: ../../JWSGI.rst:21
msgid ""
"``body`` (may be a String, an array of Strings, a File or an InputStream "
"object)"
msgstr ""

#: ../../JWSGI.rst:25
msgid "Example"
msgstr ""

#: ../../JWSGI.rst:27
msgid "A simple JWSGI app looks like this:"
msgstr ""

#: ../../JWSGI.rst:55
msgid "How to use it ?"
msgstr ""

#: ../../JWSGI.rst:57
msgid ""
"You need both the 'jvm' plugin and the 'jwsgi' plugin. A build profile "
"named 'jwsgi', is available in the project to allow a monolithic build "
"with jvm+jwsgi:"
msgstr ""

#: ../../JWSGI.rst:66
msgid "Compile your class with ``javac``."
msgstr ""

#: ../../JWSGI.rst:72
msgid "Run uWSGI and specify the method to run (in the form class:method)"
msgstr ""

#: ../../JWSGI.rst:79
msgid ""
"This will run a JWSGI application on UNIX socket /tmp/uwsgi.socket with "
"40 threads."
msgstr ""

#: ../../JWSGI.rst:83
msgid "Reading request body"
msgstr ""

#: ../../JWSGI.rst:85
msgid ""
"The ``jwsgi.input`` item is an ``uwsgi.RequestBody`` object (subclass of "
"java/io/InputStream). You it to access the request body."
msgstr ""

#: ../../JWSGI.rst:117
msgid ""
"Pay attention to the use of ``read(byte[])`` instead of the classical "
"``read()``. The latter inefficiently reads one byte at time, while the "
"former reads a larger chunk at a time."
msgstr ""

#: ../../JWSGI.rst:122
msgid "JWSGI and Groovy"
msgstr ""

#: ../../JWSGI.rst:124
msgid ""
"Being low-level, the JWSGI standard can be used as-is in other languages "
"running on the JVM.  As an example this is a \"Hello World\" Groovy "
"example:"
msgstr ""

#: ../../JWSGI.rst:134
msgid "One serving a static file:"
msgstr ""

#: ../../JWSGI.rst:143
msgid ""
"The second approach is very efficient as it will abuse uWSGI internal "
"facilities. For example if you have offloading enabled, your worker "
"thread will be suddenly freed.  To load Groovy code, remember to compile "
"it:"
msgstr ""

#: ../../JWSGI.rst:151
msgid "Then run it:"
msgstr ""

#: ../../JWSGI.rst:158
msgid "JWSGI and Scala"
msgstr ""

#: ../../JWSGI.rst:160
msgid ""
"Like Groovy, you can write JWSGI apps with Scala. You only need the entry"
" point function to use native Java objects:"
msgstr ""

#: ../../JWSGI.rst:174
msgid "Or in a more Scala-ish way:"
msgstr ""

#: ../../JWSGI.rst:188
msgid "Once compiled with ``scalac <filename>`` you run like this:"
msgstr ""

