# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Nginx.rst:2
msgid "Nginx support"
msgstr ""

#: ../../Nginx.rst:4
msgid ""
"Nginx natively includes support for upstream servers speaking the "
":doc:`uwsgi protocol<Protocol>` since version 0.8.40."
msgstr ""

#: ../../Nginx.rst:8
msgid "Configuring Nginx"
msgstr ""

#: ../../Nginx.rst:10
msgid ""
"Generally you only need to include the uwsgi_params file (included in "
"nginx distribution), and set the address of the uWSGI socket with "
"uwsgi_pass directive"
msgstr ""

#: ../../Nginx.rst:17
msgid "-- or if you are using TCP sockets,"
msgstr ""

#: ../../Nginx.rst:25
msgid ""
"Then simply reload Nginx and you are ready to rock your uWSGI powered "
"applications through Nginx."
msgstr ""

#: ../../Nginx.rst:28
msgid "What is the ``uwsgi_params`` file?"
msgstr ""

#: ../../Nginx.rst:30
msgid ""
"It's convenience, nothing more! For your reading pleasure, the contents "
"of the file as of uWSGI 1.3::"
msgstr ""

#: ../../Nginx.rst:46
msgid ":doc:`Vars`"
msgstr ""

#: ../../Nginx.rst:49
msgid "Clustering"
msgstr ""

#: ../../Nginx.rst:51
msgid ""
"Nginx has a beautiful integrated cluster support for all the upstream "
"handlers."
msgstr ""

#: ../../Nginx.rst:53
msgid "Add an `upstream` directive outside the server configuration block::"
msgstr ""

#: ../../Nginx.rst:62
msgid "Then modify your uwsgi_pass directive::"
msgstr ""

#: ../../Nginx.rst:66
msgid "Your requests will be balanced between the uWSGI servers configured."
msgstr ""

#: ../../Nginx.rst:70
msgid "Dynamic apps"
msgstr ""

#: ../../Nginx.rst:72
msgid "The uWSGI server can load applications on demand when passed special vars."
msgstr ""

#: ../../Nginx.rst:74
msgid "uWSGI can be launched without passing it any application configuration::"
msgstr ""

#: ../../Nginx.rst:79
msgid ""
"If a request sets the ``UWSGI_SCRIPT`` var, the server will load the "
"specified module::"
msgstr ""

#: ../../Nginx.rst:88
msgid "You can even configure multiple apps per-location::"
msgstr ""

#: ../../Nginx.rst:105
msgid ""
"Hosting multiple apps in the same process (aka managing SCRIPT_NAME and "
"PATH_INFO)"
msgstr ""

#: ../../Nginx.rst:107
msgid ""
"The WSGI standard dictates that ``SCRIPT_NAME`` is the variable used to "
"select a specific application. Unfortunately nginx is not able to rewrite"
" PATH_INFO accordingly to SCRIPT_NAME. For such reason you need to "
"instruct uWSGI to map specific apps in the so called \"mountpoint\" and "
"rewrite SCRIPT_NAME and PATH_INFO automatically:"
msgstr ""

#: ../../Nginx.rst:123
msgid ""
"Take in account the app itself (eventually using a WSGI/Rack/PSGI "
"middleware) can rewrite SCRIPT_NAME and PATH_INFO."
msgstr ""

#: ../../Nginx.rst:125
msgid ""
"You can use the internal routing subsystem too to rewrite request vars. "
"Especially for dynamic apps it could be a good approach."
msgstr ""

#: ../../Nginx.rst:127
msgid ""
"Note: ancient uWSGI versions used to support the so called "
"\"uwsgi_modifier1 30\" approach. Do not do it. it is a really ugly hack"
msgstr ""

#: ../../Nginx.rst:130
msgid ""
"SCRIPT_NAME is a handy convention, but you are allowed to use any "
"\"mapping way\", as an example the UWSGI_APPID variable can be used to "
"set a key in the mountpoints table."
msgstr ""

#: ../../Nginx.rst:160
msgid ""
"Remember you can use nginx variables as vars value, so you could "
"implement some form of app routing using the Host header:"
msgstr ""

#: ../../Nginx.rst:172
msgid "now just mount your apps in uWSGI using the domain name as the mount key"
msgstr ""

#: ../../Nginx.rst:183
msgid "Static files"
msgstr ""

#: ../../Nginx.rst:185
msgid ""
"For best performance and security, remember to configure Nginx to serve "
"static files instead of letting your poor application handle that."
msgstr ""

#: ../../Nginx.rst:187
msgid ""
"The uWSGI server can serve static files flawlessly but not as quickly and"
" efficiently as a dedicated web server like Nginx."
msgstr ""

#: ../../Nginx.rst:189
msgid "For example, the Django ``/media`` path could be mapped like this::"
msgstr ""

#: ../../Nginx.rst:195
msgid ""
"Some applications need to pass control to the UWSGI server only if the "
"requested filename does not exist::"
msgstr ""

#: ../../Nginx.rst:206
msgid "WARNING"
msgstr ""

#: ../../Nginx.rst:208
msgid ""
"If used incorrectly a configuration like this may cause security "
"problems. For your sanity's sake, double-triple-quadruple check that your"
" application files, configuration files and any other sensitive files are"
" outside of the root of the static files."
msgstr ""

#: ../../Nginx.rst:211
msgid "Virtual Hosting"
msgstr ""

#: ../../Nginx.rst:213
msgid "You can use Nginx's virtual hosting without particular problems."
msgstr ""

#: ../../Nginx.rst:215
msgid ""
"If you run \"untrusted\" web apps (such as those of your clients if you "
"happen to be an ISP) you should limit their memory/address space usage "
"and use a different `uid` for each host/application::"
msgstr ""

#: ../../Nginx.rst:251
msgid ""
"The customers' applications can now be run (using the process manager of "
"your choice, such as `rc.local`, :doc:`Upstart`, `Supervisord` or "
"whatever strikes your fancy) with a different uid and a limited (if you "
"want) address space for each socket::"
msgstr ""

