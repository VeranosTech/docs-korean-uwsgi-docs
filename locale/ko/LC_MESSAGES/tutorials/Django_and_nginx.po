# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorials/Django_and_nginx.rst:2
msgid "Setting up Django and your web server with uWSGI and nginx"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:6
msgid ""
"This tutorial is aimed at the Django user who wants to set up a "
"production web server. It takes you through the steps required to set up "
"Django so that it works nicely with uWSGI and nginx. It covers all three "
"components, providing a complete stack of web application and server "
"software."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:11
msgid ""
"Django_ is a high-level Python Web framework that encourages rapid "
"development and clean, pragmatic design."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:15
msgid ""
"nginx_ (pronounced *engine-x*) is a free, open-source, high-performance "
"HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:21
msgid "Some notes about this tutorial"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:23
#: ../../tutorials/Django_and_nginx.rst:41
msgid "Note"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:25
msgid ""
"This is a **tutorial**. It is not intended to provide a reference guide, "
"never mind an exhaustive reference, to the subject of deployment."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:28
msgid ""
"nginx and uWSGI are good choices for Django deployment, but they are not "
"the only ones, or the 'official' ones. There are excellent alternatives "
"to both, and you are encouraged to investigate them."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:32
msgid ""
"The way we deploy Django here is a good way, but it is **not** the *only*"
" way; for some purposes it is probably not even the best way."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:35
msgid ""
"It is however a reliable and easy way, and the material covered here will"
" introduce you to concepts and procedures you will need to be familiar "
"with whatever software you use for deploying Django. By providing you "
"with a working setup, and rehearsing the steps you must take to get "
"there, it will offer you a basis for exploring other ways to achieve "
"this."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:43
msgid "This tutorial makes some assumptions about the system you are using."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:45
msgid ""
"It is assumed that you are using a Unix-like system, and that it features"
" an aptitude-like package manager. However if you need to ask questions "
"like \"What's the equivalent of aptitude on Mac OS X?\", you'll be able "
"to find that kind of help fairly easily."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:50
msgid ""
"While this tutorial assumes Django 1.4 or later, which will automatically"
" create a wsgi module in your new project, the instructions will work "
"with earlier versions. You will though need to obtain that Django wsgi "
"module yourself, and you may find that the Django project directory "
"structure is slightly different."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:57
msgid "Concept"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:59
msgid ""
"A web server faces the outside world. It can serve files (HTML, images, "
"CSS, etc) directly from the file system. However, it can't talk "
"*directly* to Django applications; it needs something that will run the "
"application, feed it requests from web clients (such as browsers) and "
"return responses."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:64
msgid ""
"A Web Server Gateway Interface - WSGI - does this job. WSGI_ is a Python "
"standard."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:68
msgid ""
"uWSGI is a WSGI implementation. In this tutorial we will set up uWSGI so "
"that it creates a Unix socket, and serves responses to the web server via"
" the uwsgi protocol. At the end, our complete stack of components will "
"look like this::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:75
msgid "Before you start setting up uWSGI"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:78
msgid "virtualenv"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:80
msgid ""
"Make sure you are in a virtualenv for the software we need to install (we"
" will describe how to install a system-wide uwsgi later):"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:90
msgid "Django"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:92
msgid ""
"Install Django into your virtualenv, create a new project, and ``cd`` "
"into the project:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:102
msgid "About the domain and port"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:104
msgid ""
"In this tutorial we will call your domain ``example.com``. Substitute "
"your own FQDN or IP address."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:107
msgid ""
"Throughout, we'll be using port 8000 for the web server to publish on, "
"just like the Django runserver does by default. You can use whatever port"
" you want of course, but I have chosen this one so it doesn't conflict "
"with anything a web server might be doing already."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:113
msgid "Basic uWSGI installation and configuration"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:116
msgid "Install uWSGI into your virtualenv"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:122
msgid ""
"Of course there are other ways to install uWSGI, but this one is as good "
"as any. Remember that you will need to have Python development packages "
"installed. In the case of Debian, or Debian-derived systems such as "
"Ubuntu, what you need to have installed is ``pythonX.Y-dev``, where X.Y "
"is your version of Python."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:128
msgid "Basic test"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:130
msgid "Create a file called ``test.py``::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:138
msgid "Take into account that Python 3 requires ``bytes()``."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:140
msgid "Run uWSGI:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:146
#: ../../tutorials/Django_and_nginx.rst:482
msgid "The options mean:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:148
msgid "``http :8000``: use protocol http, port 8000"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:150
msgid "``wsgi-file test.py``: load the specified file, test.py"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:152
msgid ""
"This should serve a 'hello world' message directly to the browser on port"
" 8000. Visit::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:157
msgid "to check. If so, it means the following stack of components works::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:162
msgid "Test your Django project"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:164
msgid ""
"Now we want uWSGI to do the same thing, but to run a Django site instead "
"of the ``test.py`` module."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:167
msgid ""
"If you haven't already done so, make sure that your ``mysite`` project "
"actually works::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:171
msgid "And if that works, run it using uWSGI::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:175
msgid "``module mysite.wsgi``: load the specified wsgi module"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:177
msgid ""
"Point your browser at the server; if the site appears, it means uWSGI is "
"able to serve your Django application from your virtualenv, and this "
"stack operates correctly::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:183
msgid ""
"Now normally we won't have the browser speaking directly to uWSGI. That's"
" a job for the webserver, which will act as a go-between."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:187
msgid "Basic nginx"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:190
msgid "Install nginx"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:197
msgid ""
"And now check that nginx is serving by visiting it in a web browser on "
"port 80 - you should get a message from nginx: \"Welcome to nginx!\". "
"That means these components of the full stack are working together::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:203
msgid ""
"If something else *is* already serving on port 80 and you want to use "
"nginx there, you'll have to reconfigure nginx to serve on a different "
"port. For this tutorial though, we're going to be using port 8000."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:208
msgid "Configure nginx for your site"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:210
msgid ""
"You will need the ``uwsgi_params`` file, which is available in the "
"``nginx`` directory of the uWSGI distribution, or from "
"https://github.com/nginx/nginx/blob/master/conf/uwsgi_params"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:214
msgid ""
"Copy it into your project directory. In a moment we will tell nginx to "
"refer to it."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:217
msgid ""
"Now create a file called mysite_nginx.conf in the /etc/nginx/sites-"
"available/ directory, and put this in it::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:254
msgid ""
"This conf file tells nginx to serve up media and static files from the "
"filesystem, as well as handle requests that require Django's "
"intervention. For a large deployment it is considered good practice to "
"let one server handle static/media files, and another handle Django "
"applications, but for now, this will do just fine."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:260
msgid "Symlink to this file from /etc/nginx/sites-enabled so nginx can see it:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:267
msgid "Deploying static files"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:269
msgid ""
"Before running nginx, you have to collect all Django static files in the "
"static folder. First of all you have to edit mysite/settings.py adding:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:276
msgid "and then run"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:285
msgid "Basic nginx test"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:287
msgid "Restart nginx:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:293
msgid ""
"To check that media files are being served correctly, add an image called"
" ``media.png`` to the ``/path/to/your/project/project/media directory``, "
"then visit http://example.com:8000/media/media.png - if this works, "
"you'll know at least that nginx is serving files correctly."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:298
msgid ""
"It is worth not just restarting nginx, but actually stopping and then "
"starting it again, which will inform you if there is a problem, and where"
" it is."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:302
msgid "nginx and uWSGI and test.py"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:304
msgid "Let's get nginx to speak to the \"hello world\" ``test.py`` application."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:310
msgid ""
"This is nearly the same as before, except this time one of the options is"
" different:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:313
msgid "``socket :8001``: use protocol uwsgi, port 8001"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:315
msgid ""
"nginx meanwhile has been configured to communicate with uWSGI on that "
"port, and with the outside world on port 8000. Visit:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:318
msgid "http://example.com:8000/"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:320
msgid "to check. And this is our stack::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:324
msgid ""
"Meanwhile, you can try to have a look at the uwsgi output at "
"http://example.com:8001 - but quite probably, it won't work because your "
"browser speaks http, not uWSGI, though you should see output from uWSGI "
"in your terminal."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:330
msgid "Using Unix sockets instead of ports"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:332
msgid ""
"So far we have used a TCP port socket, because it's simpler, but in fact "
"it's better to use Unix sockets than ports - there's less overhead."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:335
msgid "Edit ``mysite_nginx.conf``, changing it to match::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:340
msgid "and restart nginx."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:342
msgid "Run uWSGI again:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:348
msgid "This time the ``socket`` option tells uWSGI which file to use."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:350
msgid "Try http://example.com:8000/ in the browser."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:353
msgid "If that doesn't work"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:355
msgid ""
"Check your nginx error log(/var/log/nginx/error.log). If you see "
"something like::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:360
msgid ""
"then probably you need to manage the permissions on the socket so that "
"nginx is allowed to use it."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:363
msgid "Try::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:367
msgid "or::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:371
msgid ""
"You may also have to add your user to nginx's group (which is probably "
"www-data), or vice-versa, so that nginx can read and write to your socket"
" properly."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:375
msgid ""
"It's worth keeping the output of the nginx log running in a terminal "
"window so you can easily refer to it while troubleshooting."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:379
msgid "Running the Django application with uwsgi and nginx"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:381
msgid "Let's run our Django application:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:387
msgid ""
"Now uWSGI and nginx should be serving up not just a \"Hello World\" "
"module, but your Django project."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:391
msgid "Configuring uWSGI to run with a .ini file"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:393
msgid ""
"We can put the same options that we used with uWSGI into a file, and then"
" ask uWSGI to run with that file. It makes it easier to manage "
"configurations."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:396
msgid "Create a file called ```mysite_uwsgi.ini```::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:421
msgid "And run uwsgi using this file:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:427
msgid "Once again, test that the Django site works as expected."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:430
msgid "Install uWSGI system-wide"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:432
msgid ""
"So far, uWSGI is only installed in our virtualenv; we'll need it "
"installed system-wide for deployment purposes."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:435
msgid "Deactivate your virtualenv::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:439
msgid "and install uWSGI system-wide::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:446
msgid ""
"The uWSGI wiki describes several `installation procedures`_. Before "
"installing uWSGI system-wide, it's worth considering which version to "
"choose and the most apppropriate way of installing it."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:452
msgid "Check again that you can still run uWSGI just like you did before:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:459
msgid "Emperor mode"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:461
msgid ""
"uWSGI can run in 'emperor' mode. In this mode it keeps an eye on a "
"directory of uWSGI config files, and will spawn instances ('vassals') for"
" each one it finds."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:464
msgid ""
"Whenever a config file is amended, the emperor will automatically restart"
" the vassal."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:476
msgid "You may need to run uWSGI with sudo:"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:484
msgid "``emperor``: where to look for vassals (config files)"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:485
msgid "``uid``: the user id of the process once it's started"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:486
msgid "``gid``: the group id of the process once it's started"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:488
msgid "Check the site; it should be running."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:491
msgid "Make uWSGI startup when the system boots"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:493
msgid ""
"The last step is to make it all happen automatically at system startup "
"time."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:495
msgid ""
"For many systems, the easiest (if not the best) way to do this is to use "
"the ``rc.local`` file."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:497
msgid "Edit ``/etc/rc.local`` and add::"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:501
msgid "before the line \"exit 0\"."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:503
msgid "And that should be it!"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:506
msgid "Further configuration"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:508
msgid ""
"It is important to understand that this has been a *tutorial*, to get you"
" started. You **do** need to read the nginx and uWSGI documentation, and "
"study the options available before deployment in a production "
"environment."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:512
msgid ""
"Both nginx and uWSGI benefit from friendly communities, who are able to "
"offer invaluable advice about configuration and usage."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:516
msgid "nginx"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:518
msgid ""
"General configuration of nginx is not within the scope of this tutorial "
"though you'll probably want it to listen on port 80, not 8000, for a "
"production website."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:522
msgid ""
"You should also configure a separate nginx location block for serving "
"non-Django files. For example, it's inefficient to serve static files via"
" uWSGI. Instead, serve them directly from Nginx and completely bypass "
"uWSGI."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:527
msgid "uWSGI"
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:529
msgid ""
"uWSGI supports multiple ways to configure it. See `uWSGI's "
"documentation`_ and `examples`_."
msgstr ""

#: ../../tutorials/Django_and_nginx.rst:535
msgid ""
"Some uWSGI options have been mentioned in this tutorial; others you ought"
" to look at for a deployment in production include (listed here with "
"example settings)::"
msgstr ""

