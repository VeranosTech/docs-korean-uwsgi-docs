# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Mongrel2.rst:2
msgid "Attaching uWSGI to Mongrel2"
msgstr ""

#: ../../Mongrel2.rst:4
msgid ""
"Mongrel2_ is a next-next-generation webserver that focuses on modern "
"webapps."
msgstr ""

#: ../../Mongrel2.rst:6
msgid ""
"Just like uWSGI, it is fully language agnostic, cluster-friendly and "
"delightfully controversial :)"
msgstr ""

#: ../../Mongrel2.rst:8
msgid ""
"It uses the amazing ZeroMQ_ library for communication, allowing reliable,"
" easy message queueing and configuration-free scalability."
msgstr ""

#: ../../Mongrel2.rst:10
msgid "Starting from version 0.9.8-dev, uWSGI can be used as a Mongrel2 handler."
msgstr ""

#: ../../Mongrel2.rst:16
msgid "Requirements"
msgstr ""

#: ../../Mongrel2.rst:18
msgid ""
"To enable ZeroMQ/Mongrel2 support in uWSGI you need the zeromq library "
"(2.1+) and the uuid library."
msgstr ""

#: ../../Mongrel2.rst:20
msgid ""
"Mongrel2 can use JSON or tnetstring to pass data (such as headers and "
"various other information) to handlers. uWSGI supports tnetstring out of "
"the box but requires the `Jansson <http://www.digip.org/jansson/>`_ "
"library to parse JSON data. If you don't install jansson or do not want "
"to use JSON, make sure you specify ``protocol='tnetstring'`` in the "
"Handler in the Mongrel2 configuration, as the default is to use JSON. "
"This would result in a rather obscure \"JSON support not enabled. Skip "
"request\" message in the uWSGI log."
msgstr ""

#: ../../Mongrel2.rst:24
msgid "Configuring Mongrel2"
msgstr ""

#: ../../Mongrel2.rst:26
msgid ""
"You can find ``mongrel2-uwsgi.conf`` shipped with the uWSGI source. You "
"can use this file as a base to configure Mongrel2."
msgstr ""

#: ../../Mongrel2.rst:53
msgid ""
"It is a pretty standard Mongrel2 configuration with upload streaming "
"enabled."
msgstr ""

#: ../../Mongrel2.rst:56
msgid "Configuring uWSGI for Mongrel2"
msgstr ""

#: ../../Mongrel2.rst:58
msgid "To attach uWSGI to Mongrel2, simply use the :ref:`OptionZeromq` option:"
msgstr ""

#: ../../Mongrel2.rst:64
msgid ""
"You can spawn multiple processes (each one will subscribe to Mongrel2 "
"with a different uuid)"
msgstr ""

#: ../../Mongrel2.rst:70
msgid ""
"You can use threads too. Each thread will subscribe to the Mongrel2 queue"
" but the responder socket will be shared by all the threads and protected"
" by a mutex."
msgstr ""

#: ../../Mongrel2.rst:78
msgid "Test them all"
msgstr ""

#: ../../Mongrel2.rst:80
msgid "Add an application to uWSGI (we will use the werkzeug.testapp as always)"
msgstr ""

#: ../../Mongrel2.rst:86
msgid ""
"Now launch the command on all the servers you want, Mongrel2 will "
"distribute requests to them automagically."
msgstr ""

#: ../../Mongrel2.rst:89
msgid "Async mode"
msgstr ""

#: ../../Mongrel2.rst:93
msgid ""
"Async support for ZeroMQ is still under development, as ZeroMQ uses edge "
"triggered events that complicate things in the uWSGI async architecture."
msgstr ""

#: ../../Mongrel2.rst:96
msgid "Chroot"
msgstr ""

#: ../../Mongrel2.rst:98
msgid ""
"By default Mongrel2 will ``chroot()``. This is a good thing for security,"
" but can cause headaches regarding file upload streaming. Remember that "
"Mongrel2 will save the uploaded file in its own chroot jail, so if your "
"uWSGI instance does not live in the same chroot jail, you'll have to "
"choose the paths carefully. In the example Mongrel2 configuration file we"
" have used a relative path to easily allow uWSGI to reach the file."
msgstr ""

#: ../../Mongrel2.rst:102
msgid "Performance"
msgstr ""

#: ../../Mongrel2.rst:104
msgid ""
"Mongrel2 is extremely fast and reliable even under huge loads. tnetstring"
" and JSON are text-based (so they are a little less effective than the "
"binary :doc:`uwsgi protocol <Protocol>`. However, as Mongrel2 does not "
"require the expensive one-connection-for-request method, you should get "
"pretty much the same (if not higher) results compared to a (for example) "
":doc:`Nginx<Nginx>` + uWSGI approach."
msgstr ""

#: ../../Mongrel2.rst:107
msgid "uWSGI clustering + ZeroMQ"
msgstr ""

#: ../../Mongrel2.rst:109
msgid "You can easily mix uWSGI :doc:`clustering<Clustering>` with ZeroMQ."
msgstr ""

#: ../../Mongrel2.rst:111
msgid "Choose the main node and run"
msgstr ""

#: ../../Mongrel2.rst:117
msgid "And on all the other nodes simply run"
msgstr ""

#: ../../Mongrel2.rst:125
msgid "Mixing standard sockets with ZeroMQ"
msgstr ""

#: ../../Mongrel2.rst:127
msgid ""
"You can add uwsgi/:doc:`HTTP<HTTP>`/FastCGI/... sockets to your uWSGI "
"server in addition to ZeroMQ, but if you do, remember to disable threads!"
" This limitation will probably be fixed in the future."
msgstr ""

#: ../../Mongrel2.rst:130
msgid "Logging via ZeroMQ"
msgstr ""

#: ../../Mongrel2.rst:132
msgid ":doc:`ZeroMQLogging`"
msgstr ""

