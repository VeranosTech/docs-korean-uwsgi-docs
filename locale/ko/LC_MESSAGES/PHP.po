# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../PHP.rst:2
msgid "Running PHP scripts in uWSGI"
msgstr ""

#: ../../PHP.rst:4
msgid ""
"You can safely run PHP scripts using uWSGI's :doc:`CGI<CGI>` support. The"
" downside of this approach is the latency caused by the spawn of a new "
"PHP interpreter at each request."
msgstr ""

#: ../../PHP.rst:6
msgid ""
"To get far superior performance you will want to embed the PHP "
"interpreter in the uWSGI core and use the PHP plugin."
msgstr ""

#: ../../PHP.rst:9
msgid "Building"
msgstr ""

#: ../../PHP.rst:11
msgid ""
"A bunch of distros (such as Fedora, Red Hat and CentOS) include a ``php-"
"embedded`` package. Install it, along with ``php-devel`` and you should "
"be able to build the php plugin:"
msgstr ""

#: ../../PHP.rst:22
msgid ""
"If you get linkage problems (such as libraries not found), install those "
"missing packages (``ncurses-devel``, ``gmp-devel``, ``pcre-devel``...) "
"but be warned that if you add development packages modifying the uWSGI "
"core behaviour (``pcre`` is one of these) you _need_ to recompile the "
"uWSGI server too, or strange problems will arise."
msgstr ""

#: ../../PHP.rst:24
msgid ""
"For distros that do not supply a libphp package (all Debian-based "
"distros, for instance), you have to rebuild PHP with the ``--enable-"
"embed`` flag to ``./configure``:"
msgstr ""

#: ../../PHP.rst:32
msgid "Ubuntu 10.04 (newer versions include official libphp-embed sapi)"
msgstr ""

#: ../../PHP.rst:46
msgid "Multiple PHP versions"
msgstr ""

#: ../../PHP.rst:48
msgid ""
"Sometimes (always, if you are an ISP) you might have multiple versions of"
" PHP installed in the system. In such a case, you will need one uWSGI "
"plugin for each version of PHP:"
msgstr ""

#: ../../PHP.rst:56
msgid ""
"'default' is the build profile of your server core. If you build uWSGI "
"without a specific profile, it will be 'default'."
msgstr ""

#: ../../PHP.rst:58
msgid ""
"You can then load a specific plugin with ``plugins php51``, etc. You "
"cannot load multiple PHP versions in the same uWSGI process."
msgstr ""

#: ../../PHP.rst:61
msgid "Running PHP apps with nginx"
msgstr ""

#: ../../PHP.rst:63
msgid ""
"If you have simple apps (based on file extensions) you can use something "
"like this:"
msgstr ""

#: ../../PHP.rst:74
msgid "You might want to check for all of URIs containing the string ``.php``:"
msgstr ""

#: ../../PHP.rst:85
msgid "Now simply run the uWSGI server with a bunch of processes:"
msgstr ""

#: ../../PHP.rst:93
msgid ""
"This will allow up to 40 concurrent php requests but will try to spawn "
"(or destroy) workers only when needed, maintaining a minimal pool of 4 "
"processes."
msgstr ""

#: ../../PHP.rst:96
msgid "Advanced configuration"
msgstr ""

#: ../../PHP.rst:98
msgid ""
"By default, the PHP plugin will happily execute whatever script you pass "
"to it. You may want to limit it to only a subset of extensions with the "
"``php-allowed-ext`` option."
msgstr ""

#: ../../PHP.rst:105
msgid "Run PHP apps without a frontend server"
msgstr ""

#: ../../PHP.rst:107
msgid ""
"This is an example configuration with a \"public\" uWSGI instance running"
" a PHP app and serving static files. It is somewhat complex for an "
"example, but should be a good starting point for trickier configurations."
msgstr ""

#: ../../PHP.rst:156
msgid ""
"A more extreme example that mixes :doc:`CGI <CGI>` with PHP using "
":doc:`internal routing <InternalRouting>` and a dash of "
":doc:`configuration logic <ConfigLogic>`."
msgstr ""

#: ../../PHP.rst:218
msgid "uWSGI API support"
msgstr ""

#: ../../PHP.rst:220
msgid ""
"Preliminary support for some of the uWSGI API has been added in 1.1. This"
" is the list of supported functions:"
msgstr ""

#: ../../PHP.rst:222
msgid "uwsgi_version()"
msgstr ""

#: ../../PHP.rst:223
msgid "uwsgi_setprocname($name)"
msgstr ""

#: ../../PHP.rst:224
msgid "uwsgi_worker_id()"
msgstr ""

#: ../../PHP.rst:225
msgid "uwsgi_masterpid()"
msgstr ""

#: ../../PHP.rst:226
msgid "uwsgi_signal($signum)"
msgstr ""

#: ../../PHP.rst:227
msgid "uwsgi_rpc($node, $func, ...)"
msgstr ""

#: ../../PHP.rst:228
msgid "uwsgi_cache_get($key)"
msgstr ""

#: ../../PHP.rst:229
msgid "uwsgi_cache_set($key, $value)"
msgstr ""

#: ../../PHP.rst:230
msgid "uwsgi_cache_update($key, $value)"
msgstr ""

#: ../../PHP.rst:231
msgid "uwsgi_cache_del($key)"
msgstr ""

#: ../../PHP.rst:233
msgid "Yes, this means you can call Python functions from PHP using RPC."
msgstr ""

#: ../../PHP.rst:248
msgid ""
"Setting the first argument of ``uwsgi_rpc`` to empty, will trigger local "
"rpc."
msgstr ""

#: ../../PHP.rst:250
msgid "Or you can share the uWSGI :doc:`cache <Caching>`..."
msgstr ""

#: ../../PHP.rst:262
msgid "Sessions over uWSGI caches (uWSGI >=2.0.4)"
msgstr ""

#: ../../PHP.rst:264
msgid "Starting from uWSGI 2.0.4, you can store PHP sessions in uWSGI caches."
msgstr ""

#: ../../PHP.rst:284
msgid "Zend Opcode Cache (uWSGI >= 2.0.6)"
msgstr ""

#: ../../PHP.rst:286
msgid ""
"For some mysterious reason, the opcode cache is disabled in the embed "
"SAPI."
msgstr ""

#: ../../PHP.rst:288
msgid ""
"You can bypass the problem by telling the PHP engine that is running "
"under the apache SAPI (using the ``php-sapi-name`` option):"
msgstr ""

#: ../../PHP.rst:299
msgid "ForkServer (uWSGI >= 2.1)"
msgstr ""

#: ../../PHP.rst:301
msgid ""
":doc:`ForkServer` is one of the main features of the 2.1 branch. It "
"allows you to inherit your vassals from specific parents instead of the "
"Emperor."
msgstr ""

#: ../../PHP.rst:303
msgid ""
"The PHP plugin has been extended to support a fork-server so you can have"
" a pool of php base instances from which vassals can `fork()`. This means"
" you can share the opcode cache and do other tricks."
msgstr ""

#: ../../PHP.rst:305
msgid ""
"Thanks to the vassal attributes in uWSGI 2.1 we can choose from which "
"parent a vassal will call fork()."
msgstr ""

#: ../../PHP.rst:309
msgid ""
"You need Linux kernel >= 3.4 (the feature requires "
"``PR_SET_CHILD_SUBREAPER``) for \"solid\" use. Otherwise your Emperor "
"will not be able to correctly wait() on children (and this will slow-down"
" your vassal's respawns, and could lead to various form of race "
"conditions)."
msgstr ""

#: ../../PHP.rst:311
msgid ""
"In the following example we will spawn 3 vassals, one (called base.ini) "
"will initialize a PHP engine, while the others two will `fork()` from it."
msgstr ""

#: ../../PHP.rst:326
msgid "then the 2 vassals"
msgstr ""

#: ../../PHP.rst:364
msgid ""
"The two vassals are completely unrelated (even if they fork from the same"
" parent), so you can drop privileges, have different process policies and"
" so on."
msgstr ""

#: ../../PHP.rst:366
msgid "Now spawn the Emperor:"
msgstr ""

#: ../../PHP.rst:372
msgid ""
"The ``--emperor-collect-attr`` forces the Emperor to search for the "
"'fork-server' attribute in the [emperor] section of the vassal file, "
"while ``--emperor-fork-server-attr`` tells it to use this parameter as "
"the address of the fork server."
msgstr ""

#: ../../PHP.rst:374
msgid ""
"Obviously if a vassal does not expose such an attribute, it will normally"
" fork() from the Emperor."
msgstr ""

