# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Logging.rst:2
msgid "Logging"
msgstr ""

#: ../../Logging.rst:4
msgid ":doc:`LogFormat`"
msgstr ""

#: ../../Logging.rst:7
msgid "Basic logging"
msgstr ""

#: ../../Logging.rst:9
msgid ""
"The most basic form of logging in uWSGI is writing requests, errors, and "
"informational messages to stdout/stderr. This happens in the default "
"configuration.  The most basic form of log redirection is the ``--logto``"
" / ``--logto2`` / ``--daemonize`` options which allow you to redirect "
"logs to files."
msgstr ""

#: ../../Logging.rst:16
msgid "Basic logging to files"
msgstr ""

#: ../../Logging.rst:18
msgid ""
"To log to files instead of stdout/stderr, use ``--logto``, or to "
"simultaneously daemonize uWSGI, ``--daemonize``."
msgstr ""

#: ../../Logging.rst:29
msgid "Basic logging (connected UDP mode)"
msgstr ""

#: ../../Logging.rst:31
msgid ""
"With UDP logging you can centralize cluster logging or redirect the "
"persistence of logs to another machine to offload disk I/O. UDP logging "
"works in both daemonized and interactive modes. UDP logging operaties in "
"connected-socket mode, so the UDP server must be available before uWSGI "
"starts.  For a more raw approach (working in unconnected mode) see the "
"section on socket logging."
msgstr ""

#: ../../Logging.rst:37
msgid ""
"To enable connected UDP mode pass the address of a UDP server to the "
"``--daemonize``/``--logto`` option:"
msgstr ""

#: ../../Logging.rst:45
msgid ""
"This will redirect all the stdout/stderr data to the UDP socket on "
"192.168.0.100, port 1717.  Now you need an UDP server that will manage "
"your UDP messages. You could use netcat, or even uWSGI:"
msgstr ""

#: ../../Logging.rst:54
msgid ""
"The second way is a bit more useful as it will print the source (ip:port)"
" of every message. In case of multiple uWSGI server logging on the same "
"UDP server it will allow you to recognize one server from another. "
"Naturally you can write your own apps to manage/filter/save the logs "
"received via udp."
msgstr ""

#: ../../Logging.rst:61
msgid "Pluggable loggers"
msgstr ""

#: ../../Logging.rst:63
msgid ""
"uWSGI also supports pluggable loggers, which allow you more flexibility "
"on where and what to log. Depending on the configuration of your uWSGI "
"build, some loggers may or may not be available. Some may require to be "
"loaded as plugins. To find out what plugins are available in your build, "
"invoke uWSGI with ``--logger-list``. To set up a pluggable logger, use "
"the ``--logger`` or ``--req-logger`` options. ``--logger`` will set up a "
"logger for every message while ``--req-logger`` will set up a logger for "
"request information messages."
msgstr ""

#: ../../Logging.rst:71
msgid "This is the syntax:"
msgstr ""

#: ../../Logging.rst:78
msgid ""
"You may set up as many loggers as you like. Named plugins are used for "
"log routing.  A very simple example of split request/error logging using "
"plain text files follows."
msgstr ""

#: ../../Logging.rst:89
msgid "Log routing"
msgstr ""

#: ../../Logging.rst:91
msgid ""
"By default all log lines are sent to all declared loggers. If this is not"
" what you want, you can use ``--log-route`` (and ``--log-req-route`` for "
"request loggers) to specify a regular expression to route certain log "
"messages to different destinations."
msgstr ""

#: ../../Logging.rst:96
msgid "For instance:"
msgstr ""

#: ../../Logging.rst:110
msgid ""
"This will log each 500 level error to /tmp/errors, while listen queue "
"full errors will end up in /tmp/foobar.  This is somewhat similar to the "
":doc:`AlarmSubsystem`, though alarms are usually heavier and should only "
"be used for critical situations."
msgstr ""

#: ../../Logging.rst:116
msgid "Logging to files"
msgstr ""

#: ../../Logging.rst:118
msgid "``logfile`` plugin -- embedded by default."
msgstr ""

#: ../../Logging.rst:124
msgid "You can optionally configure automatic log rotation:"
msgstr ""

#: ../../Logging.rst:130
msgid ""
"This will rotate the log file once it reaches 2 million bytes. The new "
"name will be the original log file with the extension replaced with a "
"timestamp."
msgstr ""

#: ../../Logging.rst:133
msgid ""
"You can also specify the `backupname` instead of allowing uWSGI to "
"autogenerate one."
msgstr ""

#: ../../Logging.rst:137
msgid "Logging to sockets"
msgstr ""

#: ../../Logging.rst:139
msgid "``logsocket`` plugin -- embedded by default."
msgstr ""

#: ../../Logging.rst:141
msgid ""
"You can log to an unconnected UNIX or UDP socket using ``--logger "
"socket:...`` (or ``--log-socket ...``)."
msgstr ""

#: ../../Logging.rst:148
msgid "will send log entries to the Unix socket ``/tmp/uwsgi.logsock``."
msgstr ""

#: ../../Logging.rst:154
msgid ""
"will send log datagrams to the UDP address 192.168.173.19 on port 5050.  "
"You may also multicast logs to multiple log servers by passing the "
"multicast address:"
msgstr ""

#: ../../Logging.rst:163
msgid "Logging to syslog"
msgstr ""

#: ../../Logging.rst:165
msgid "``syslog`` plugin -- embedded by default"
msgstr ""

#: ../../Logging.rst:167
msgid ""
"The ``syslog`` plugin routes logs to Unix standard syslog. You may pass "
"an optional ID to send and the \"facility\" for the log entry."
msgstr ""

#: ../../Logging.rst:174
msgid "or"
msgstr ""

#: ../../Logging.rst:180
msgid "to send to the local6 facility"
msgstr ""

#: ../../Logging.rst:184
msgid "Logging to remote syslog"
msgstr ""

#: ../../Logging.rst:186
msgid "``rsyslog`` plugin -- embedded by default"
msgstr ""

#: ../../Logging.rst:189
msgid ""
"The ``rsyslog`` plugin routes logs to Unix standard syslog residing on a "
"remote server. In addtition to the address+port of the remote syslog "
"server, you may pass an optional ID to send as the \"facility\" parameter"
" for the log entry."
msgstr ""

#: ../../Logging.rst:199
msgid "Redis logger"
msgstr ""

#: ../../Logging.rst:201
msgid "``redislog`` plugin -- embedded by default."
msgstr ""

#: ../../Logging.rst:203
msgid ""
"By default the ``redislog`` plugin will 'publish' each logline to a redis"
" pub/sub queue. The logger plugin syntax is:"
msgstr ""

#: ../../Logging.rst:210
msgid ""
"By default ``host`` is mapped to ``127.0.0.1:6379``, ``command`` is "
"mapped to \"publish uwsgi\" and ``prefix`` is empty.  To publish to a "
"queue called foobar, use ``redislog:127.0.0.1:6379,publish foobar``.  "
"Redis logging is not limited to pub/sub. You could for instance push "
"items into a list, as in the next example."
msgstr ""

#: ../../Logging.rst:220
msgid ""
"As error situations could cause the master to block while writing a log "
"line to a remote server, it's a good idea to use ``--threaded-logger`` to"
" offload log writes to a secondary thread."
msgstr ""

#: ../../Logging.rst:225
msgid "MongoDB logger"
msgstr ""

#: ../../Logging.rst:227
msgid "``mongodblog`` plugin -- embedded by default."
msgstr ""

#: ../../Logging.rst:229
msgid "The logger syntax for MongoDB logging (``mongodblog``) is"
msgstr ""

#: ../../Logging.rst:235
msgid ""
"Where ``host`` is the address of the MongoDB instance (default "
"``127.0.0.1:27017``), ``collection`` names the collection to write log "
"lines into (default ``uwsgi.logs``) and ``node`` is an identification "
"string for the instance sending logs (default: server hostname)."
msgstr ""

#: ../../Logging.rst:244
msgid "Will run the logger with default values, while"
msgstr ""

#: ../../Logging.rst:250
msgid ""
"Will write logs to the mongodb server 127.0.0.1:9090 in the collection "
"``foo.bar`` using the default node name.  As with the Redis logger, "
"offloading log writes to a dedicated thread is a good choice."
msgstr ""

#: ../../Logging.rst:264
msgid "ZeroMQ logging"
msgstr ""

#: ../../Logging.rst:266
msgid ""
"As with UDP logging you can centralize/distribute logging via ZeroMQ. "
"Build your logger daemon using a ``ZMQ_PULL`` socket:"
msgstr ""

#: ../../Logging.rst:282
msgid "Now run your uWSGI server:"
msgstr ""

#: ../../Logging.rst:288
msgid "(``--log-zeromq`` is an alias for this logger.)"
msgstr ""

#: ../../Logging.rst:292
msgid "Crypto logger (plugin)"
msgstr ""

#: ../../Logging.rst:294
msgid ""
"If you host your applications on cloud services without persistent "
"storage you may want to send your logs to external systems.  However logs"
" often contain sensitive information that should not be transferred in "
"clear.  The ``logcrypto`` plugin logger attempts to solve this issue by "
"encrypting each log packet before sending it over UDP to a server able to"
" decrypt it.  The next example will send each log packet to a UDP server "
"available at 192.168.173.22:1717 encrypting the text with the secret key "
"``ciaociao`` with Blowfish in CBC mode."
msgstr ""

#: ../../Logging.rst:308
msgid ""
"An example server is available at "
"https://github.com/unbit/uwsgi/blob/master/contrib/cryptologger.rb"
msgstr ""

#: ../../Logging.rst:312
msgid "Graylog2 logger (plugin)"
msgstr ""

#: ../../Logging.rst:314
msgid "``graylog2`` plugin -- not compiled by default."
msgstr ""

#: ../../Logging.rst:316
msgid ""
"This plugin will send logs to a Graylog2 server in Graylog2's native GELF"
" format."
msgstr ""

#: ../../Logging.rst:323
msgid "Systemd logger (plugin)"
msgstr ""

#: ../../Logging.rst:325
msgid "``systemd_logger`` plugin -- not compiled by default."
msgstr ""

#: ../../Logging.rst:327
msgid "This plugin will write log entries into the Systemd journal."
msgstr ""

#: ../../Logging.rst:335
msgid "Writing your own logger plugins"
msgstr ""

#: ../../Logging.rst:337
msgid ""
"This plugin, ``foolog.c`` will write your messages in the file specified "
"with --logto/--daemonize with a simple prefix using vector IO."
msgstr ""

