# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../AlarmSubsystem.rst:2
msgid "The uWSGI alarm subsystem (from 1.3)"
msgstr ""

#: ../../AlarmSubsystem.rst:4
msgid ""
"As of 1.3, uWSGI includes an alarm system. This subsystem allows the "
"developer/sysadmin to 'announce' special conditions of an app via various"
" channels.  For example, you may want to get notified via Jabber/XMPP of "
"a full listen queue, or a harakiri condition.  The alarm subsystem is "
"based on two components: an event monitor and an event action."
msgstr ""

#: ../../AlarmSubsystem.rst:10
msgid ""
"An event monitor is something waiting for a specific condition (like an "
"event on a file descriptor or a specific log message)."
msgstr ""

#: ../../AlarmSubsystem.rst:12
msgid ""
"As soon as the condition is true an action (like sending an email) is "
"triggered."
msgstr ""

#: ../../AlarmSubsystem.rst:15
msgid "Embedded event monitors"
msgstr ""

#: ../../AlarmSubsystem.rst:17
msgid ""
"Event monitors can be added via plugins, the uWSGI core includes the "
"following:"
msgstr ""

#: ../../AlarmSubsystem.rst:19
msgid "``log-alarm`` triggers an alarm when a specific regexp matches a log line"
msgstr ""

#: ../../AlarmSubsystem.rst:20
msgid ""
"``alarm-fd`` triggers an alarm when the specified file descriptor is "
"ready (which is pretty low-level and the basis of most of the alarm "
"plugins)"
msgstr ""

#: ../../AlarmSubsystem.rst:21
msgid "``alarm-backlog`` triggers an alarm when the socket backlog queue is full"
msgstr ""

#: ../../AlarmSubsystem.rst:22
msgid "``alarm-segfault`` (since 1.9.9) triggers an alarm when uWSGI segfaults."
msgstr ""

#: ../../AlarmSubsystem.rst:23
msgid ""
"``alarm-cheap`` Use main alarm thread rather than creating dedicated "
"threads for each curl-based alarm"
msgstr ""

#: ../../AlarmSubsystem.rst:26
msgid "Defining an alarm"
msgstr ""

#: ../../AlarmSubsystem.rst:28
msgid ""
"You can define an unlimited number of alarms. Each alarm has a unique "
"name."
msgstr ""

#: ../../AlarmSubsystem.rst:30
msgid ""
"Currently the following alarm actions are available in the main "
"distribution:"
msgstr ""

#: ../../AlarmSubsystem.rst:39
msgid "To define an alarm, use the option ``--alarm``."
msgstr ""

#: ../../AlarmSubsystem.rst:44
msgid "Remember to quote ONLY when you are defining alarms on the command line."
msgstr ""

#: ../../AlarmSubsystem.rst:52
msgid ""
"Here we define two alarms: ``mailme`` and ``cachefull``. The first one "
"invokes the ``mail`` binary to send the log line to a mail address; the "
"second one generates an uWSGI signal.  We now need to add rules to "
"trigger alarms:"
msgstr ""

#: ../../AlarmSubsystem.rst:64
msgid "The syntax of log-alarm is"
msgstr ""

#: ../../AlarmSubsystem.rst:70
msgid ""
"In our previous example we defined two conditions using regexps applied "
"to log lines. The first one will trigger both alarms when the listen "
"queue is full, while the second will only invoke 'mailme' when a worker "
"commits harakiri."
msgstr ""

#: ../../AlarmSubsystem.rst:75
msgid "Damnit, this... this is the rawest thing I've seen..."
msgstr ""

#: ../../AlarmSubsystem.rst:77
msgid ""
"You may be right. But if you throw away your \"being a cool programmer "
"with a lot of friends and zero money\" book for a moment, you will "
"realize just how many things you can do with such a simple system.  Want "
"an example?"
msgstr ""

#: ../../AlarmSubsystem.rst:87
msgid "Now in your app you only need to add"
msgstr ""

#: ../../AlarmSubsystem.rst:93
msgid ""
"to send a Jabber message to ``admin@jabber.xxx`` and "
"``admin2@jabber.xxx`` without adding any significant overhead to your app"
" (as alarms are triggered by one or more threads in the master process, "
"without bothering workers)."
msgstr ""

#: ../../AlarmSubsystem.rst:97
msgid "How about another example?"
msgstr ""

#: ../../AlarmSubsystem.rst:99
msgid "Check this Rack middleware:"
msgstr ""

#: ../../AlarmSubsystem.rst:118
msgid "Protecting from bad rules"
msgstr ""

#: ../../AlarmSubsystem.rst:120
msgid ""
"Such a versatile system could be open to a lot of ugly bugs, mainly "
"infinite loops. Thus, try to build your regexps carefully. The embedded "
"anti-loop subsystem should protect against loglines wrongly generated by "
"alarm plugin. This system is not perfect so please double-check your "
"regexps."
msgstr ""

#: ../../AlarmSubsystem.rst:125
msgid ""
"If you are building a plugin, be sure to prepend your log messages with "
"the '[uwsgi-alarm' string. These lines will be skipped and directly "
"passed to the log subsystem. A convenience API function is available: "
"``uwsgi_log_alarm()``."
msgstr ""

#: ../../AlarmSubsystem.rst:130
msgid "How does log-alarm work?"
msgstr ""

#: ../../AlarmSubsystem.rst:132
msgid ""
"Enabling log-alarm automatically puts the uWSGI instance in :term:`log-"
"master mode`, delegating log writes to the master.  The alarm subsystem "
"is executed by the master just before passing the log line to the log "
"plugin. Blocking alarm plugins should run in a thread (like the curl and "
"xmpp one), while the simple ones (like signal and cmd) may run directly "
"in the master."
msgstr ""

#: ../../AlarmSubsystem.rst:139
msgid "Available plugins and their syntax"
msgstr ""

#: ../../AlarmSubsystem.rst:142
msgid "cmd"
msgstr ""

#: ../../AlarmSubsystem.rst:144
msgid "Run a shell command, passing the log line to its stdin:"
msgstr ""

#: ../../AlarmSubsystem.rst:151
msgid "signal"
msgstr ""

#: ../../AlarmSubsystem.rst:153
msgid "Raise an uWSGI signal."
msgstr ""

#: ../../AlarmSubsystem.rst:158
msgid ":doc:`Signals`"
msgstr ""

#: ../../AlarmSubsystem.rst:161
msgid "mule"
msgstr ""

#: ../../AlarmSubsystem.rst:163
msgid "Send the log line to a mule waiting for messages."
msgstr ""

#: ../../AlarmSubsystem.rst:168
msgid ":doc:`Mules`"
msgstr ""

#: ../../AlarmSubsystem.rst:171
msgid "curl"
msgstr ""

#: ../../AlarmSubsystem.rst:173
msgid ""
"Send the log line to a cURL-able URL. This alarm plugin is not compiled "
"in by default, so if you need to build it just run:"
msgstr ""

#: ../../AlarmSubsystem.rst:181
msgid "``url`` is any standard cURL URL, while the options currently exposed are"
msgstr ""

#: ../../AlarmSubsystem.rst:183
msgid "\"auth_pass\""
msgstr ""

#: ../../AlarmSubsystem.rst:184
msgid "\"auth_user\""
msgstr ""

#: ../../AlarmSubsystem.rst:185
msgid "\"conn_timeout\""
msgstr ""

#: ../../AlarmSubsystem.rst:186
msgid "\"mail_from\""
msgstr ""

#: ../../AlarmSubsystem.rst:187
msgid "\"mail_to\""
msgstr ""

#: ../../AlarmSubsystem.rst:188
msgid "\"method\""
msgstr ""

#: ../../AlarmSubsystem.rst:189
msgid "\"ssl\""
msgstr ""

#: ../../AlarmSubsystem.rst:190
msgid "\"subject\""
msgstr ""

#: ../../AlarmSubsystem.rst:191
msgid "\"timeout\""
msgstr ""

#: ../../AlarmSubsystem.rst:192
msgid "\"url\""
msgstr ""

#: ../../AlarmSubsystem.rst:193
msgid "\"ssl_insecure\""
msgstr ""

#: ../../AlarmSubsystem.rst:195
msgid "So, for sending mail via SMTP AUTH:"
msgstr ""

#: ../../AlarmSubsystem.rst:203
msgid "Or we can use Gmail to send alarms:"
msgstr ""

#: ../../AlarmSubsystem.rst:211
msgid ""
"Or to `PUT` the log line to an HTTP server protected with basic "
"authentication:"
msgstr ""

#: ../../AlarmSubsystem.rst:219
msgid ""
"Or to `POST` the log line to an HTTPS server with self-generated SSL "
"certificate."
msgstr ""

#: ../../AlarmSubsystem.rst:228
msgid "xmpp"
msgstr ""

#: ../../AlarmSubsystem.rst:230
msgid ""
"Probably the most interesting one of the built-in bunch. You need the "
"``libgloox`` package to build the XMPP alarm plugin (on Debian/Ubuntu, "
"``apt-get install gloox-dev``)."
msgstr ""

#: ../../AlarmSubsystem.rst:240
msgid "You can set multiple recipients using ',' as delimiter."
msgstr ""

#: ../../AlarmSubsystem.rst:248
msgid ""
"An even more interesting thing still about the XMPP plugin is that you "
"will see the Jabber account of your app going down when your app dies. "
":-)"
msgstr ""

#: ../../AlarmSubsystem.rst:250
msgid ""
"Some XMPP servers (most notably the OSX Server one) requires you to bind "
"to a resource. You can do thus by appending ``/resource`` to the JID."
msgstr ""

#: ../../AlarmSubsystem.rst:259
msgid "speech"
msgstr ""

#: ../../AlarmSubsystem.rst:261
msgid ""
"A toy plugin for OSX, used mainly for showing off Objective-C integration"
" with uWSGI. It simply uses the OSX speech synthesizer to 'announce' the "
"alarm."
msgstr ""

#: ../../AlarmSubsystem.rst:276
msgid "Turn on your speakers, run uWSGI and start listening..."
msgstr ""

#: ../../AlarmSubsystem.rst:279
msgid "airbrake"
msgstr ""

#: ../../AlarmSubsystem.rst:281
msgid ""
"Starting with 1.9.9 uWSGI includes the ``--alarm-segfault`` option to "
"raise an alarm when uWSGI segfaults."
msgstr ""

#: ../../AlarmSubsystem.rst:284
msgid ""
"The ``airbrake`` plugin can be used to send segfault backtraces to "
"airbrake compatible servers. Like Airbrake itself and its open source "
"clone errbit (https://github.com/errbit/errbit), Airbrake support is "
"experimental and it might not fully work in all cases."
msgstr ""

#: ../../AlarmSubsystem.rst:295
msgid ""
"Note that alarm-segfault does not require the Airbrake plugin. A "
"backtrace can just as well be sent using any other alarm plugin."
msgstr ""

