# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../RubyAPI.rst:2
msgid "Ruby API support"
msgstr ""

#: ../../RubyAPI.rst:5
msgid "Status"
msgstr ""

#: ../../RubyAPI.rst:7
msgid ""
"The uWSGI API for Ruby is still incomplete (QueueFramework, SharedArea, "
"custom routing and SNMP being the most missing players). The DSL will be "
"extended as soon as the various API calls are ready."
msgstr ""

#: ../../RubyAPI.rst:9
msgid ""
"Currently available API functions and constants (available in the UWSGI "
"ruby module) are"
msgstr ""

#: ../../RubyAPI.rst:12
msgid "UWSGI.suspend"
msgstr ""

#: ../../RubyAPI.rst:13
msgid "UWSGI.masterpid"
msgstr ""

#: ../../RubyAPI.rst:14
msgid "UWSGI.async_sleep"
msgstr ""

#: ../../RubyAPI.rst:15
msgid "UWSGI.wait_fd_read"
msgstr ""

#: ../../RubyAPI.rst:16
msgid "UWSGI.wait_fd_write"
msgstr ""

#: ../../RubyAPI.rst:17
msgid "UWSGI.async_connect"
msgstr ""

#: ../../RubyAPI.rst:18
msgid "UWSGI.signal"
msgstr ""

#: ../../RubyAPI.rst:19
msgid "UWSGI.register_signal"
msgstr ""

#: ../../RubyAPI.rst:20
msgid "UWSGI.register_rpc"
msgstr ""

#: ../../RubyAPI.rst:21
msgid "UWSGI.signal_registered"
msgstr ""

#: ../../RubyAPI.rst:22
msgid "UWSGI.signal_wait"
msgstr ""

#: ../../RubyAPI.rst:23
msgid "UWSGI.signal_received"
msgstr ""

#: ../../RubyAPI.rst:24
msgid "UWSGI.add_cron"
msgstr ""

#: ../../RubyAPI.rst:25
msgid "UWSGI.add_timer"
msgstr ""

#: ../../RubyAPI.rst:26
msgid "UWSGI.add_rb_timer"
msgstr ""

#: ../../RubyAPI.rst:27
msgid "UWSGI.add_file_monitor"
msgstr ""

#: ../../RubyAPI.rst:28
msgid "UWSGI.cache_get"
msgstr ""

#: ../../RubyAPI.rst:29
msgid "UWSGI.cache_get!"
msgstr ""

#: ../../RubyAPI.rst:30
msgid "UWSGI.cache_exists"
msgstr ""

#: ../../RubyAPI.rst:31
msgid "UWSGI.cache_exists?"
msgstr ""

#: ../../RubyAPI.rst:32
msgid "UWSGI.cache_del"
msgstr ""

#: ../../RubyAPI.rst:33 ../../RubyAPI.rst:34
msgid "UWSGI.cache_set"
msgstr ""

#: ../../RubyAPI.rst:35
msgid "UWSGI.cache_set!"
msgstr ""

#: ../../RubyAPI.rst:36
msgid "UWSGI.cache_update"
msgstr ""

#: ../../RubyAPI.rst:37
msgid "UWSGI.cache_update!"
msgstr ""

#: ../../RubyAPI.rst:38
msgid "UWSGI.setprocname"
msgstr ""

#: ../../RubyAPI.rst:39
msgid "UWSGI.set_warning_message"
msgstr ""

#: ../../RubyAPI.rst:40
msgid "UWSGI.lock"
msgstr ""

#: ../../RubyAPI.rst:41
msgid "UWSGI.unlock"
msgstr ""

#: ../../RubyAPI.rst:42
msgid "UWSGI.mem"
msgstr ""

#: ../../RubyAPI.rst:43
msgid "UWSGI.mule_get_msg"
msgstr ""

#: ../../RubyAPI.rst:44
msgid "UWSGI.request_id"
msgstr ""

#: ../../RubyAPI.rst:45
msgid "UWSGI.mule_id"
msgstr ""

#: ../../RubyAPI.rst:46
msgid "UWSGI.mule_msg"
msgstr ""

#: ../../RubyAPI.rst:47
msgid "UWSGI.worker_id"
msgstr ""

#: ../../RubyAPI.rst:48
msgid "UWSGI.log"
msgstr ""

#: ../../RubyAPI.rst:49
msgid "UWSGI.logsize"
msgstr ""

#: ../../RubyAPI.rst:50
msgid "UWSGI.i_am_the_spooler"
msgstr ""

#: ../../RubyAPI.rst:51
msgid "UWSGI.send_to_spooler"
msgstr ""

#: ../../RubyAPI.rst:52
msgid "UWSGI.spool"
msgstr ""

#: ../../RubyAPI.rst:53
msgid "UWSGI::OPT"
msgstr ""

#: ../../RubyAPI.rst:54
msgid "UWSGI::VERSION"
msgstr ""

#: ../../RubyAPI.rst:55
msgid "UWSGI::HOSTNAME"
msgstr ""

#: ../../RubyAPI.rst:56
msgid "UWSGI::NUMPROC"
msgstr ""

#: ../../RubyAPI.rst:57
msgid "UWSGI::PIDFILE"
msgstr ""

#: ../../RubyAPI.rst:58
msgid "UWSGI::SPOOL_OK"
msgstr ""

#: ../../RubyAPI.rst:59
msgid "UWSGI::SPOOL_RETRY"
msgstr ""

#: ../../RubyAPI.rst:60
msgid "UWSGI::SPOLL_IGNORE"
msgstr ""

#: ../../RubyAPI.rst:63
msgid "uWSGI DSL"
msgstr ""

#: ../../RubyAPI.rst:65
msgid ""
"In parallel to the uWSGI API Python decorators, a DSL for Ruby is "
"available, allowing elegant access to the uWSGI API."
msgstr ""

#: ../../RubyAPI.rst:67
msgid ""
"The module is available as :file:`uwsgidsl.rb` in the source "
"distribution. You can put this code in your :file:`config.ru` file, or "
"use the ``rbrequire`` option to auto-include it."
msgstr ""

#: ../../RubyAPI.rst:70
msgid "timer(n, block)"
msgstr ""

#: ../../RubyAPI.rst:72
msgid "Execute code at regular intervals."
msgstr ""

#: ../../RubyAPI.rst:81
msgid "rbtimer(n, block)"
msgstr ""

#: ../../RubyAPI.rst:83
msgid "As timer, but using a red-black tree timer."
msgstr ""

#: ../../RubyAPI.rst:92
msgid "filemon(path, block)"
msgstr ""

#: ../../RubyAPI.rst:94
msgid "Execute code at file modifications."
msgstr ""

#: ../../RubyAPI.rst:104
msgid "cron(hours, mins, dom, mon, dow, block)"
msgstr ""

#: ../../RubyAPI.rst:106
msgid "Execute a task periodically using the :doc:`CronInterface`."
msgstr ""

#: ../../RubyAPI.rst:115
msgid "signal(signum, block)"
msgstr ""

#: ../../RubyAPI.rst:117
msgid "Register code as a signal handler for the :doc:`SignalFramework`."
msgstr ""

#: ../../RubyAPI.rst:126
msgid "postfork(block)"
msgstr ""

#: ../../RubyAPI.rst:128
msgid "Execute code after each ``fork()``."
msgstr ""

#: ../../RubyAPI.rst:137
msgid "rpc(name, block)"
msgstr ""

#: ../../RubyAPI.rst:139
msgid "Register code as a :doc:`RPC` function."
msgstr ""

#: ../../RubyAPI.rst:152
msgid "mule(id?, block)"
msgstr ""

#: ../../RubyAPI.rst:154
msgid "Execute code as a :doc:`Mule <Mules>` brain."
msgstr ""

#: ../../RubyAPI.rst:166
msgid ""
"After the function returns, the mule will be brainless. To avoid this, "
"put the code in a loop, or use ``muleloop``."
msgstr ""

#: ../../RubyAPI.rst:169
msgid "muleloop(id?, block)"
msgstr ""

#: ../../RubyAPI.rst:171
msgid "Execute code in a mule in looped context."
msgstr ""

#: ../../RubyAPI.rst:181
msgid "SpoolProc"
msgstr ""

#: ../../RubyAPI.rst:183
msgid ""
"A subclass of ``Proc``, allowing you to define a task to be executed in "
"the :doc:`Spooler<Spooler>`."
msgstr ""

#: ../../RubyAPI.rst:197
msgid "MuleFunc"
msgstr ""

#: ../../RubyAPI.rst:199
msgid "Call a function from any process (such as a worker), but execute in a mule"
msgstr ""

#: ../../RubyAPI.rst:209
msgid ""
"The worker calls ``i_am_a_long_running_function()`` but the function will"
" be execute asynchronously in the first available mule."
msgstr ""

#: ../../RubyAPI.rst:211
msgid ""
"If you want to run the function on a specific mule, add an ID parameter. "
"The following would only use mule #5."
msgstr ""

#: ../../RubyAPI.rst:222
msgid "Real world usage"
msgstr ""

#: ../../RubyAPI.rst:224
msgid "A simple Sinatra app printing messages every 30 seconds:"
msgstr ""

#: ../../RubyAPI.rst:244
msgid "Or you can put your code in a dedicated file (:file:`mytasks.rb` here)"
msgstr ""

#: ../../RubyAPI.rst:258
msgid "and then load it with"
msgstr ""

