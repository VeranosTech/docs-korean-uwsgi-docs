# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../SubscriptionServer.rst:2
msgid "uWSGI Subscription Server"
msgstr ""

#: ../../SubscriptionServer.rst:4
msgid "Some components of the uWSGI stack require a key-value mapping system."
msgstr ""

#: ../../SubscriptionServer.rst:6
msgid ""
"For example the :doc:`Fastrouter` needs to know which server to contact "
"for a specific request."
msgstr ""

#: ../../SubscriptionServer.rst:8
msgid ""
"In big networks with a lot of nodes manually managing this configuration "
"could be a real hell. uWSGI implements a subscription system where the "
"node itself announces its presence to Subscription Servers, which will in"
" turn populate their internal dictionaries."
msgstr ""

#: ../../SubscriptionServer.rst:15
msgid ""
"This will run an uWSGI fastrouter on port 1717 and create an empty "
"dictionary where the hostname is the key and the uwsgi address is the "
"value."
msgstr ""

#: ../../SubscriptionServer.rst:17
msgid ""
"To populate this dictionary you can contact 192.168.0.100:2626, the "
"address of the subscription server."
msgstr ""

#: ../../SubscriptionServer.rst:19
msgid ""
"For every key multiple addresses can exist, enabling load balancing "
"(various algorithms are available)."
msgstr ""

#: ../../SubscriptionServer.rst:21
msgid ""
"A node can announce its presence to a Subscription Server using the "
"``subscribe-to`` or ``subscribe2`` options."
msgstr ""

#: ../../SubscriptionServer.rst:27
msgid "The FastRouter will map every request for uwsgi.it to 192.168.0.10:3031."
msgstr ""

#: ../../SubscriptionServer.rst:29
msgid "To now add a second node for uwsgi.it simply run it and subscribe:"
msgstr ""

#: ../../SubscriptionServer.rst:35
msgid "Dead nodes are automatically removed from the pool."
msgstr ""

#: ../../SubscriptionServer.rst:37
msgid ""
"The syntax for ``subscribe2`` is similar but it allows far more control "
"since it allows to specify additional options like the address to which "
"all requests should be forwarded. Its value syntax is a string with "
"\"key=value\" pairs, each separated by a comma."
msgstr ""

#: ../../SubscriptionServer.rst:43
msgid "For a list of the available ``subscribe2`` keys, see below."
msgstr ""

#: ../../SubscriptionServer.rst:45
msgid ""
"The subscription system is currently available for cluster joining (when "
"multicast/broadcast is not available), the Fastrouter, the "
"HTTP/HTTPS/SPDY router, the rawrouter and the sslrouter."
msgstr ""

#: ../../SubscriptionServer.rst:47
msgid ""
"That said, you can create an evented/fast_as_hell HTTP load balancer in "
"no time."
msgstr ""

#: ../../SubscriptionServer.rst:53
msgid "Now simply subscribe your nodes to the HTTP subscription server."
msgstr ""

#: ../../SubscriptionServer.rst:55
msgid ""
"You can check the subscription server stats and/or the subscribed nodes "
"through the ``http-stats-server`` option."
msgstr ""

#: ../../SubscriptionServer.rst:61
msgid ""
"You can also forward subscription requests to another server with the "
"option ``http-resubscribe``."
msgstr ""

#: ../../SubscriptionServer.rst:68
msgid "Securing the Subscription System"
msgstr ""

#: ../../SubscriptionServer.rst:70
msgid ""
"The subscription system is meant for \"trusted\" networks. All of the "
"nodes in your network can potentially make a total mess with it."
msgstr ""

#: ../../SubscriptionServer.rst:72
msgid ""
"If you are building an infrastructure for untrusted users or you simply "
"need more control over who can subscribe to a Subscription Server you can"
" use openssl rsa public/private key pairs for \"signing\" you "
"subscription requests."
msgstr ""

#: ../../SubscriptionServer.rst:81
msgid ""
"The keys must be named after the domain/key we are subscribing to serve, "
"plus the .pem extension."
msgstr ""

#: ../../SubscriptionServer.rst:83
msgid ""
"If you're subscribing to a pool for an application listening on a "
"specified port you need to use the ``domain_port.pem`` scheme for your "
"key files. Generally all of the DNS-allowed chars are supported, all of "
"the others are mapped to an underscore."
msgstr ""

#: ../../SubscriptionServer.rst:85
msgid "An example of an RSA protected server looks like this:"
msgstr ""

#: ../../SubscriptionServer.rst:95
msgid ""
"The last line tells uWSGI that public key files will be stored in "
"/etc/uwsgi/keys."
msgstr ""

#: ../../SubscriptionServer.rst:97
msgid ""
"At each subscription request the server will check for the availability "
"of the public key file and use it, if available, to verify the signature "
"of the packet. Packets that do not correctly verify are rejected."
msgstr ""

#: ../../SubscriptionServer.rst:99
msgid ""
"On the client side you need to pass your private key along with other "
"``subscribe-to`` options. Here's an example:"
msgstr ""

#: ../../SubscriptionServer.rst:108
msgid "Let's analyze the ``subscribe-to`` usage:"
msgstr ""

#: ../../SubscriptionServer.rst:110
msgid "``127.0.0.1:2626`` is the subscription server we want to subscribe to."
msgstr ""

#: ../../SubscriptionServer.rst:111
msgid "``test.uwsgi.it:8000`` is the subscription key."
msgstr ""

#: ../../SubscriptionServer.rst:112
msgid "``5`` is the modifier1 value for our psgi app"
msgstr ""

#: ../../SubscriptionServer.rst:113
msgid ""
"``SHA1:/home/private/test.uwsgi.it_8000.pem`` is the <digest>:<rsa> "
"couple for authenticating to the server (the <rsa> field is the private "
"key path)."
msgstr ""

#: ../../SubscriptionServer.rst:115
msgid ""
"Please make sure you're using the same digest method (SHA1 in the "
"examples above) both on the server and on the client."
msgstr ""

#: ../../SubscriptionServer.rst:117
msgid ""
"To avoid replay attacks, each subscription packet has an increasing "
"number (normally the unix time) avoiding the allowance of duplicated "
"packets. Even if an attacker manages to sniff a subscription packet it "
"will be unusable as it is already processed previously. Obviously if "
"someone manages to steal your private key he will be able to build forged"
" packets."
msgstr ""

#: ../../SubscriptionServer.rst:122
msgid "Using SSH keys"
msgstr ""

#: ../../SubscriptionServer.rst:124
msgid ""
"SSH-formatted keys are generally loved by developers (well, more than "
"classic PEM files)."
msgstr ""

#: ../../SubscriptionServer.rst:126
msgid ""
"Both --subscribe-to and --subscribe2 (see below) support SSH private "
"keys, while for the server part you have the encode the public key in "
"pkcs8:"
msgstr ""

#: ../../SubscriptionServer.rst:133
msgid "--subscribe2"
msgstr ""

#: ../../SubscriptionServer.rst:135
msgid ""
"This is the keyval version of --subscribe-to. It supports more tricks and"
" a (generally) more readable syntax:"
msgstr ""

#: ../../SubscriptionServer.rst:142
msgid "Supported fields are:"
msgstr ""

#: ../../SubscriptionServer.rst:144
msgid "``server`` the address of the subscription server"
msgstr ""

#: ../../SubscriptionServer.rst:145
msgid "``key`` the key to subscribe (generally the domain name)"
msgstr ""

#: ../../SubscriptionServer.rst:146
msgid "``addr`` the address to subscribe (the value of the item)"
msgstr ""

#: ../../SubscriptionServer.rst:147
msgid ""
"``socket`` the socket number (zero-based), this is like 'addr' by take "
"the uWSGI internal socket number"
msgstr ""

#: ../../SubscriptionServer.rst:148
msgid "``weight`` the load balancing value"
msgstr ""

#: ../../SubscriptionServer.rst:149
msgid "``modifier1`` and ``modifier2``"
msgstr ""

#: ../../SubscriptionServer.rst:150
msgid "``sign`` <algo>:<file> the signature for the secured system"
msgstr ""

#: ../../SubscriptionServer.rst:151
msgid ""
"``check`` it takes a file as argument. If it exists the packet is sent, "
"otherwise it is skipped"
msgstr ""

#: ../../SubscriptionServer.rst:152
msgid "``sni_key`` set the keyfile to use for SNI proxy management"
msgstr ""

#: ../../SubscriptionServer.rst:153
msgid "``sni_crt`` set the crt file to use for SNI proxy management"
msgstr ""

#: ../../SubscriptionServer.rst:154
msgid "``sni_ca`` set the ca file to use for SNI proxy management"
msgstr ""

#: ../../SubscriptionServer.rst:155
msgid ""
"``algo`` (uWSGI 2.1) set the load balancing algorithm to use (they are "
"pluggable, included are wrr, lrc, wlrc and iphash)"
msgstr ""

#: ../../SubscriptionServer.rst:156
msgid "``proto`` (uWSGI 2.1) the protocol to use, by default it is 'uwsgi'"
msgstr ""

#: ../../SubscriptionServer.rst:157
msgid "``backup`` (uWSGI 2.1) set the backup level (change meaning based on algo)"
msgstr ""

#: ../../SubscriptionServer.rst:160
msgid "Notifications"
msgstr ""

#: ../../SubscriptionServer.rst:162
msgid ""
"When you subscribe to a server, you can ask it to \"acknowledge\" the "
"acceptance of your request."
msgstr ""

#: ../../SubscriptionServer.rst:164
msgid ""
"Just add ``--subscription-notify-socket <addr>`` pointing to a datagram "
"(Unix or UDP) address, on which your instance will bind and the "
"subscription server will send acknowledgements to."
msgstr ""

#: ../../SubscriptionServer.rst:167
msgid "Mountpoints (uWSGI 2.1)"
msgstr ""

#: ../../SubscriptionServer.rst:169
msgid "Generally you subscribe your apps to specific domains."
msgstr ""

#: ../../SubscriptionServer.rst:171
msgid ""
"Thanks to the mountpoint support introduced in uWSGI 2.1, you can now "
"subscribe each node to a specific directory (you need to specify how much"
" levels you want to support):"
msgstr ""

#: ../../SubscriptionServer.rst:173
msgid ""
"First of all you need to tell the subscription server to accept (and "
"manage) mountpoint requests:"
msgstr ""

#: ../../SubscriptionServer.rst:179
msgid "Then you can start subscribing to mountpoints."
msgstr ""

#: ../../SubscriptionServer.rst:188
msgid ""
"The first and the third instance will answer to all of the requests for "
"/foo, the second will answer for /bar and the last one will manage all of"
" the others."
msgstr ""

#: ../../SubscriptionServer.rst:190
msgid ""
"For the secured subscription system, you only need to use the domain key "
"(you do not need to generate a certificate for each mountpoint)."
msgstr ""

#: ../../SubscriptionServer.rst:192
msgid ""
"If you want to support mountpoints in the form /one/two instead of /one, "
"just pass '2' to --subscription-mountpoints and so on. For performance "
"reason you need to choose how much elements your path can support, and "
"you cannot mix them (read: if --subscription-mountpoints is 2 you can "
"support /one/two or /foo/bar but not /foobar)"
msgstr ""

