# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Snippets.rst:2
msgid "Snippets"
msgstr ""

#: ../../Snippets.rst:4
msgid "This is a collection of some of the most \"fun\" uses of uWSGI features."
msgstr ""

#: ../../Snippets.rst:7
msgid "X-Sendfile emulation"
msgstr ""

#: ../../Snippets.rst:9
msgid ""
"Even if your frontend proxy/webserver does not support X-Sendfile (or "
"cannot access your static resources) you can emulate it using uWSGI's "
"internal offloading (your process/thread will delegate the actual static "
"file serving to offload threads)."
msgstr ""

#: ../../Snippets.rst:29
msgid "Force HTTPS"
msgstr ""

#: ../../Snippets.rst:31
msgid "This will force HTTPS for the whole site."
msgstr ""

#: ../../Snippets.rst:41
msgid "And this only for ``/admin``"
msgstr ""

#: ../../Snippets.rst:56
msgid ""
"Eventually you may want to send HSTS (HTTP Strict Transport Security) "
"header too."
msgstr ""

#: ../../Snippets.rst:69
msgid "Python Auto-reloading (DEVELOPMENT ONLY!)"
msgstr ""

#: ../../Snippets.rst:71
msgid ""
"In production you can monitor file/directory changes for triggering "
"reloads (touch-reload, fs-reload...)."
msgstr ""

#: ../../Snippets.rst:73
msgid ""
"During development having a monitor for all of the loaded/used python "
"modules can be handy. But please use it only during development."
msgstr ""

#: ../../Snippets.rst:75
msgid ""
"The check is done by a thread that scans the modules list with the "
"specified frequency:"
msgstr ""

#: ../../Snippets.rst:83
msgid ""
"will check for python modules changes every 2 seconds and eventually "
"restart the instance."
msgstr ""

#: ../../Snippets.rst:85
msgid "And again:"
msgstr ""

#: ../../Snippets.rst:87
msgid "Use this only in development."
msgstr ""

#: ../../Snippets.rst:91
msgid "Full-Stack CGI setup"
msgstr ""

#: ../../Snippets.rst:93
msgid "This example spawned from a uWSGI mailing list thread."
msgstr ""

#: ../../Snippets.rst:95
msgid ""
"We have static files in /var/www and cgis in /var/cgi. Cgi will be "
"accessed using the /cgi-bin mountpoint. So /var/cgi/foo.lua will be run "
"on request to /cgi-bin/foo.lua"
msgstr ""

#: ../../Snippets.rst:136
msgid "Multiple flask apps in different mountpoints"
msgstr ""

#: ../../Snippets.rst:138
msgid "Let's write three flask apps:"
msgstr ""

#: ../../Snippets.rst:172
msgid "each will be mounted respectively in /app1, /app2, /app3"
msgstr ""

#: ../../Snippets.rst:174
msgid ""
"To mount an application with a specific \"key\" in uWSGI, you use the "
"--mount option:"
msgstr ""

#: ../../Snippets.rst:176
msgid "``` --mount <mountpoint>=<app> ```"
msgstr ""

#: ../../Snippets.rst:180
msgid ""
"in our case we want to mount 3 python apps, each keyed with what will be "
"the WSGI SCRIPT_NAME variable:"
msgstr ""

#: ../../Snippets.rst:200
msgid ""
"now directly point your webserver.proxy to the instance socket (without "
"doing additional configurations)"
msgstr ""

#: ../../Snippets.rst:202
msgid ""
"Note: by default every app is loaded in a new python interpreter (that "
"means a pretty-well isolated namespace for each app). If you want all of "
"the app to be loaded in the same python vm, use the --single-interpreter "
"option."
msgstr ""

#: ../../Snippets.rst:205
msgid ""
"Another note: you may find reference to an obscure \"modifier1 30\" "
"trick. It is deprecated and extremely ugly. uWSGI is able to rewrite "
"request variables in lot of advanced ways"
msgstr ""

#: ../../Snippets.rst:207
msgid ""
"Final note: by default, the first loaded app is mounted as the \"default "
"one\". That app will be served when no mountpoint matches."
msgstr ""

#: ../../Snippets.rst:211
msgid "rbenv on OSX (should work on other platforms too)"
msgstr ""

#: ../../Snippets.rst:213
msgid "install rbenv"
msgstr ""

#: ../../Snippets.rst:220
msgid ""
"(do not set the magic line in .bash_profile as described in the classic "
"howto, as we want to not clobber the environment, and allow uWSGI to get "
"rid of it)"
msgstr ""

#: ../../Snippets.rst:222
msgid ""
"get a uWSGI tarball and build the 'nolang' version (it is a monolithic "
"one without language plugins compiled in)"
msgstr ""

#: ../../Snippets.rst:231
msgid "now start installing the ruby versions you need"
msgstr ""

#: ../../Snippets.rst:238
msgid "and install the gems you need (sinatra in this case):"
msgstr ""

#: ../../Snippets.rst:258
msgid "now to switch from one ruby to another, just change the plugin:"
msgstr ""

#: ../../Snippets.rst:267
msgid "or"
msgstr ""

#: ../../Snippets.rst:276
msgid ""
"ensure plugins are stored in the current working directory, or set the "
"plugins-dir directive or specify them with absolute path like"
msgstr ""

#: ../../Snippets.rst:287
msgid "Authenticated WebSocket Proxy"
msgstr ""

#: ../../Snippets.rst:289
msgid ""
"App server identifies websocket traffic, authenticates/authorizes the "
"user using whatever CGI variables against the app's own "
"policies/infrastructure, then offloads/proxies the request to a simple "
"kafka-websocket backend."
msgstr ""

#: ../../Snippets.rst:292
msgid "First create ``auth_kafka.py``:"
msgstr ""

#: ../../Snippets.rst:309
msgid "Then create ``auth_kafka.ini``:"
msgstr ""

#: ../../Snippets.rst:344
msgid "Start a \"kafka-websocket\" server:"
msgstr ""

#: ../../Snippets.rst:350
msgid ""
"Now go to ``http://127.0.0.1:8000`` in a web browser! You should see "
"``Hello!``. Open chrome inspector or firebug and type:"
msgstr ""

#: ../../Snippets.rst:356
msgid ""
"You should see this request proxied to your ``nc`` command! This pattern "
"allows the internal network to host a more-or-less wide-open/generic "
"kafka -> websocket gateway and delegates auth needs to the app server. "
"Using ``offload-threads`` means proxied requests do *NOT* block workers; "
"using ``httpdumb`` prevents mangling the request (``http`` action forces "
"``HTTP/1.0``)"
msgstr ""

#: ../../Snippets.rst:362
msgid "SELinux and uWSGI"
msgstr ""

#: ../../Snippets.rst:364
msgid ""
"SELinux allows you to isolate web application processes from each other, "
"and limits each program to its purpose only. The applications can be "
"placed into strongly isolated individual sandboxes, separating them from "
"one another and from the underlying operating system. Since SELinux is "
"implemented within the kernel, applications do not need to be "
"specifically written or modified to work under SELinux. There is an "
"`SELinux security policy for web applications  "
"<https://github.com/reinow/sepwebapp>`_ at github well suited for uWSGI. "
"This security policy also supports the uWSGI emperor process running in "
"one domain, and each web application's worker processes running in a "
"separate domain, requiring only minimal privileges for the worker "
"processes even if Linux namespaces are used. Of course, there is no "
"requirement for emperor mode, or Linux namespaces, to use SELinux with "
"uWSGI."
msgstr ""

#: ../../Snippets.rst:366
msgid ""
"On Linux it is possible to run each vassal with a dedicated view of the "
"filesystems, ipc, uts, networking, pids and uids. Then each vassal can, "
"for example, modify the filesystem layout, networking, and hostname "
"without damaging the main system. With this setup, privileged tasks, like"
" mounting filesystems, setting hostnames, configuring the network, and "
"setting gid and uid of the worker processes can be done before changing "
"the SELinux security context of the vassals' process ensuring that only "
"minimal privileges are required for the worker processes."
msgstr ""

#: ../../Snippets.rst:368
msgid ""
"First configure, compile and load the SELinux web application security "
"policy. Then, relabel the application files. Further information on how "
"to configure web application policies can be found in the README.md "
"included in the `SELinux security policy for web applications "
"<https://github.com/reinow/sepwebapp>`_. Finally, in each vassall's "
"configuration file, call the setcon function in libselinux to set the web"
" application's SELinux security context:"
msgstr ""

#: ../../Snippets.rst:376
msgid ""
"where id is the identity of the domain. Example, foo is the identity of "
"the webapp_foo_t domain."
msgstr ""

#: ../../Snippets.rst:378
msgid ""
"It may be required to load libselinux in the uWSGI address space with the"
" --dlopen option:"
msgstr ""

