# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../ForkServer.rst:2
msgid "The Fork Server (sponsored by Intellisurvey)"
msgstr ""

#: ../../ForkServer.rst:4
msgid ""
"This is a really advanced (and complex) feature developed with "
"sponsorship from Intellisurvey.com."
msgstr ""

#: ../../ForkServer.rst:6
msgid ""
"If you have dozens or even hundreds of applications built upon the same "
"codebase you can setup your Emperor to fork vassals from an already "
"running one (with the application core loaded)."
msgstr ""

#: ../../ForkServer.rst:9
msgid ""
"Currently the feature is supported only in the PSGI plugin, and requires "
"Linux kernel >= 3.4."
msgstr ""

#: ../../ForkServer.rst:12
msgid "How it works"
msgstr ""

#: ../../ForkServer.rst:14
msgid ""
"When in `fork-server` mode, the Emperor differentiates between two kind "
"of vassals: base vassals and adopted vassals."
msgstr ""

#: ../../ForkServer.rst:16
msgid ""
"\"base\" vassals are pretty much classic vassals; generated by `fork()` +"
" `execve()` by the Emperor. The only difference is that they are supposed"
" to load as much of your application code as possible as soon as "
"possible, then suspend themselves waiting for connections on a UNIX "
"socket."
msgstr ""

#: ../../ForkServer.rst:19
msgid "A \"base\" vassal will be something like this"
msgstr ""

#: ../../ForkServer.rst:29
msgid "\"Adopted\" vassals are the true \"new thing\"."
msgstr ""

#: ../../ForkServer.rst:31
msgid ""
"Once an adopted vassal is requested, the Emperor connects to the "
"specified fork server (instead of calling `fork()` + `execve()` itself)."
msgstr ""

#: ../../ForkServer.rst:33
msgid ""
"The Emperor passes an uwsgi-serialized array of command line options of "
"the new vassal and up to 3 file descriptors (since UNIX sockets allow "
"passing file descriptors from one process to another)."
msgstr ""

#: ../../ForkServer.rst:35
msgid "Those 3 file descriptors are:"
msgstr ""

#: ../../ForkServer.rst:37
msgid "1 -> the communication pipe with the Emperor (required)"
msgstr ""

#: ../../ForkServer.rst:38
msgid "2 -> the config pipe (optional)"
msgstr ""

#: ../../ForkServer.rst:39
msgid "3 -> on_demand socket (optional)"
msgstr ""

#: ../../ForkServer.rst:41
msgid ""
"At this point, the fork server `fork()`\\ s itself twice and continues "
"the uWSGI startup using the supplied arguments array."
msgstr ""

#: ../../ForkServer.rst:43
msgid "How can the Emperor `wait()` on an external process, then?"
msgstr ""

#: ../../ForkServer.rst:45
msgid ""
"This is why a >= 3.4 kernel is required, as thanks to the "
"`prctl(PR_SET_CHILD_SUBREAPER, 1)` call we can tell vassals to be re-"
"parented to the Emperor when their parent dies (in fact the fork-server "
"forks two times, so the vassal has no live parent, poor thing)."
msgstr ""

#: ../../ForkServer.rst:48
msgid "Now the Emperor has a new child and a communication pipe. And that's all."
msgstr ""

#: ../../ForkServer.rst:51
msgid "Configuring the Emperor for fork-server mode"
msgstr ""

#: ../../ForkServer.rst:53
msgid ""
"You need only two new options: ``--emperor-use-fork-serve <addr>`` and "
"``--vassal-fork-base <name>``"
msgstr ""

#: ../../ForkServer.rst:55
msgid "Let's start with a slow-loading (10 seconds) Perl app:"
msgstr ""

#: ../../ForkServer.rst:66
msgid ""
"Save it as myapp.pl and load it in perlbase.ini vassal file (this is a "
"base vassal):"
msgstr ""

#: ../../ForkServer.rst:74
msgid ""
"Now create two vassals (one.ini and two.ini) that will `fork()` from the "
"base one:"
msgstr ""

#: ../../ForkServer.rst:94
msgid "As you can see they are pretty different, even in privileges."
msgstr ""

#: ../../ForkServer.rst:96
msgid ""
"Now let's spawn the Emperor in fork-server mode allowing perlbase.ini as "
"a \"base\" vassal:"
msgstr ""

#: ../../ForkServer.rst:106
msgid ""
"The Emperor will start running perlbase.ini as a standard vassal, while "
"for the non-base ones it will `fork()` from the base, where the app is "
"already loaded."
msgstr ""

#: ../../ForkServer.rst:108
msgid ""
"You will note that instead waiting for 10 seconds, your new vassals will "
"start immediately. Pretty cool, huh?"
msgstr ""

