# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Namespaces.rst:2
msgid "Jailing your apps using Linux Namespaces"
msgstr ""

#: ../../Namespaces.rst:4
msgid ""
"If you have a recent Linux kernel (>2.6.26) and you are not on the "
"Itanium architecture you can use the namespaces support."
msgstr ""

#: ../../Namespaces.rst:7
msgid "What are namespaces?"
msgstr ""

#: ../../Namespaces.rst:9
msgid ""
"They are an elegant (more elegant than most of the jailing systems you "
"might find in other operating systems) way to \"detach\" your processes "
"from a specific layer of the kernel and assign them to a new one."
msgstr ""

#: ../../Namespaces.rst:11
msgid ""
"The 'chroot' system available on UNIX/Posix systems is a primal form of "
"namespaces: a process sees a completely new file system root and has no "
"access to the original one."
msgstr ""

#: ../../Namespaces.rst:13
msgid ""
"Linux extends this concept to the other OS layers (PIDs, users, IPC, "
"networking etc.), so a specific process can live in a \"virtual OS\" with"
" a new group of pids, a new set of users, a completely unshared IPC "
"system (semaphores, shared memory etc.), a dedicated network interface "
"and its own hostname."
msgstr ""

#: ../../Namespaces.rst:15
msgid "uWSGI got full namespaces support in 1.9/2.0 development cycle."
msgstr ""

#: ../../Namespaces.rst:18
msgid "clone() vs unshare()"
msgstr ""

#: ../../Namespaces.rst:20
msgid ""
"To place the current process in a new namespace you have two syscalls: "
"the venerable ``clone()``, that will create a new process in the "
"specified namespace and the new kid on the block, ``unshare()``, that "
"changes namespaces for the current running process."
msgstr ""

#: ../../Namespaces.rst:23
msgid ""
"``clone()`` can be used by the Emperor to directly spawn vassals in new "
"namespaces:"
msgstr ""

#: ../../Namespaces.rst:31
msgid ""
"will run each vassal with a dedicated filesystem, networking, SysV IPC "
"and UTS view."
msgstr ""

#: ../../Namespaces.rst:39
msgid "will run the current instance in the specified namespaces."
msgstr ""

#: ../../Namespaces.rst:41
msgid ""
"Some namespace subsystems require additional steps for sane usage (see "
"below)."
msgstr ""

#: ../../Namespaces.rst:44
msgid "Supported namespaces"
msgstr ""

#: ../../Namespaces.rst:46
msgid "``fs`` -> CLONE_NEWNS, filesystems"
msgstr ""

#: ../../Namespaces.rst:47
msgid "``ipc`` -> CLONE_NEWIPC, sysv ipc"
msgstr ""

#: ../../Namespaces.rst:48
msgid ""
"``pid`` -> CLONE_NEWPID, when used with unshare() requires an additional "
"``fork()``. Use one of the --refork-* options."
msgstr ""

#: ../../Namespaces.rst:49
msgid "``uts`` -> CLONE_NEWUTS, hostname"
msgstr ""

#: ../../Namespaces.rst:50
msgid ""
"``net`` -> CLONE_NEWNET, new networking, UNIX sockets from different "
"namespaces are still usable, they are a good way for inter-namespaces "
"communications"
msgstr ""

#: ../../Namespaces.rst:51
msgid ""
"``user`` -> CLONE_NEWUSER, still complex to manage (and has differences "
"in behaviours between kernel versions) use with caution"
msgstr ""

#: ../../Namespaces.rst:54
msgid "setns()"
msgstr ""

#: ../../Namespaces.rst:56
msgid ""
"In addition to creating new namespaces for a process you can attach to "
"already running ones using the ``setns()`` call."
msgstr ""

#: ../../Namespaces.rst:58
msgid ""
"Each process exposes its namespaces via the ``/proc/self/ns`` directory. "
"The setns() syscall uses the file descriptors obtained from the files in "
"that directory to attach to namespaces."
msgstr ""

#: ../../Namespaces.rst:61
msgid ""
"As we have already seen, UNIX sockets are a good way to communicate "
"between namespaces, the uWSGI ``setns()`` feature works by creating an "
"UNIX socket that receives requests from processes wanting to join its "
"namespace. As UNIX sockets allow file descriptors passing, the \"client\""
" only need to call setns() on them."
msgstr ""

#: ../../Namespaces.rst:64
msgid ""
"``setns-socket <addr>`` exposes /proc/self/ns on the specified unix "
"socket address"
msgstr ""

#: ../../Namespaces.rst:65
msgid ""
"``setns <addr>`` connect to the specified unix socket address, get the "
"filedescriptors and use setns() on them"
msgstr ""

#: ../../Namespaces.rst:66
msgid ""
"``setns-preopen`` if enabled the /proc/self/ns files are opened on "
"startup (before privileges drop) and cached. This is useful for avoiding "
"running the main instance as root."
msgstr ""

#: ../../Namespaces.rst:67
msgid ""
"``setns-socket-skip <name>`` some file in /proc/self/ns can create "
"problems (mostly the 'user' one). You can skip them specifying the name. "
"(you can specify this option multiple times)"
msgstr ""

#: ../../Namespaces.rst:70
msgid "pivot_root"
msgstr ""

#: ../../Namespaces.rst:72
msgid ""
"This option allows you to change the rootfs of your currently running "
"instance."
msgstr ""

#: ../../Namespaces.rst:74
msgid ""
"It is better than chroot as it allows you to access the old file system "
"tree before (manually) unmounting it."
msgstr ""

#: ../../Namespaces.rst:76
msgid ""
"It is a bit complex to master correctly as it requires a couple of "
"assumptions:"
msgstr ""

#: ../../Namespaces.rst:78
msgid "``pivot_root <new> <old>``"
msgstr ""

#: ../../Namespaces.rst:80
msgid ""
"<new> is the directory to mount as the new rootfs and <old> is where to "
"access the old tree."
msgstr ""

#: ../../Namespaces.rst:82
msgid ""
"<new> must be a mounted file system, and <old> must be under this file "
"system."
msgstr ""

#: ../../Namespaces.rst:84
msgid "A common pattern is:"
msgstr ""

#: ../../Namespaces.rst:94
msgid "(Remember to create ``/ns`` and ``/distro/precise/.old_root``.)"
msgstr ""

#: ../../Namespaces.rst:96
msgid ""
"When you have created the new file system layout you can umount "
"/.old_root recursively:"
msgstr ""

#: ../../Namespaces.rst:113
msgid "Why not lxc?"
msgstr ""

#: ../../Namespaces.rst:115
msgid ""
"LXC (LinuX Containers) is a project allowing you to build full subsystems"
" using Linux namespaces. You may ask why \"reinvent the wheel\" while LXC"
" implements a fully \"virtualized\" system. Apples and oranges..."
msgstr ""

#: ../../Namespaces.rst:118
msgid ""
"LXC's objective is giving users the view of a virtual server. uWSGI "
"namespaces support is lower level -- you can use it to detach single "
"components (for example you may only want to unshare IPC) to increase "
"security and isolation."
msgstr ""

#: ../../Namespaces.rst:121
msgid ""
"Not all the scenario requires a full system-like view (and in lot of case"
" is suboptimal, while in other is the best approach), try to see "
"namespaces as a way to increase security and isolation, when you need/can"
" isolate a component do it with clone/unshare. When you want to give "
"users a full system-like access go with LXC."
msgstr ""

#: ../../Namespaces.rst:126
msgid "The old way: the --namespace option"
msgstr ""

#: ../../Namespaces.rst:128
msgid ""
"Before 1.9/2.0 a full featured system-like namespace support was added. "
"It works as a chroot() on steroids."
msgstr ""

#: ../../Namespaces.rst:130
msgid ""
"It should be moved as an external plugin pretty soon, but will be always "
"part of the main distribution, as it is used by lot of people for its "
"simplicity."
msgstr ""

#: ../../Namespaces.rst:133
msgid ""
"You basically need to set a root filesystem and an hostname to start your"
" instance in a new namespace:"
msgstr ""

#: ../../Namespaces.rst:135
msgid ""
"Let's start by creating a new root filesystem for our jail. You'll need "
"``debootstrap`` (or an equivalent package for your distribution). We're "
"placing our rootfs in ``/ns/001``, and then create a 'uwsgi' user that "
"will run the uWSGI server. We will use the chroot command to 'adduser' in"
" the new rootfs, and we will install the Flask package, required by "
"uwsgicc."
msgstr ""

#: ../../Namespaces.rst:139
msgid "(All this needs to be executed as root)"
msgstr ""

#: ../../Namespaces.rst:155
msgid "Now on your real system run"
msgstr ""

#: ../../Namespaces.rst:161
msgid ""
"If all goes well, uWSGI will set ``/ns/001`` as the new root filesystem, "
"assign ``mybeautifulhostname`` as the hostname and hide the PIDs and IPC "
"of the host system."
msgstr ""

#: ../../Namespaces.rst:163
msgid ""
"The first thing you should note is the uWSGI master becoming PID 1 (the "
"\"init\" process) in the new namespace. All processes generated by the "
"uWSGI stack will be reparented to it if something goes wrong. If the "
"master dies, all jailed processes die."
msgstr ""

#: ../../Namespaces.rst:166
msgid ""
"Now point your web browser to your web server and you should see the "
"uWSGI Control Center interface."
msgstr ""

#: ../../Namespaces.rst:168
msgid ""
"Pay attention to the information area. The node name (used by cluster "
"subsystem) matches the real hostname as it does not make sense to have "
"multiple jail in the same cluster group. In the hostname field instead "
"you will see the hostname you have set."
msgstr ""

#: ../../Namespaces.rst:170
msgid ""
"Another important thing is that you can see all the jail processes from "
"your real system (they will have a different set of PIDs), so if you want"
" to take control of the jail you can easily do it."
msgstr ""

#: ../../Namespaces.rst:176
msgid ""
"A good way to limit hardware usage of jails is to combine them with the "
"cgroups subsystem."
msgstr ""

#: ../../Namespaces.rst:178
msgid ":doc:`Cgroups`"
msgstr ""

#: ../../Namespaces.rst:181
msgid "Reloading uWSGI"
msgstr ""

#: ../../Namespaces.rst:183
msgid ""
"When running in a jail, uWSGI uses another system for reloading: it'll "
"simply tell workers to bugger off and then exit. The parent process "
"living outside the namespace will see this and respawn the stack in a new"
" jail."
msgstr ""

#: ../../Namespaces.rst:186
msgid "How secure is this sort of jailing?"
msgstr ""

#: ../../Namespaces.rst:188
msgid "Hard to say! All software tends to be secure until a hole is found."
msgstr ""

#: ../../Namespaces.rst:191
msgid "Additional filesystems"
msgstr ""

#: ../../Namespaces.rst:193
msgid ""
"When app is jailed to namespace it only has access to its virtual jail "
"root filesystem. If there is any other filesystem mounted inside the jail"
" directory, it won't be accessible, unless you use ``namespace-keep-"
"mount``."
msgstr ""

#: ../../Namespaces.rst:203
msgid ""
"This will bind /apps/app1/nfs to jail, so that jailed app can access it "
"under /nfs directory"
msgstr ""

#: ../../Namespaces.rst:213
msgid ""
"If the filesystem that we want to bind is mounted in path not contained "
"inside our jail, than we can use \"<source>:<dest>\" syntax for "
"--namespace-keep-mount. In this case the /mnt/nfs1 will be binded to /nfs"
" directory inside the jail."
msgstr ""

