# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Transformations.rst:2
msgid "uWSGI Transformations"
msgstr ""

#: ../../Transformations.rst:4
msgid ""
"Starting from uWSGI 1.9.7, a \"transformations\" API has been added to "
":doc:`InternalRouting`."
msgstr ""

#: ../../Transformations.rst:6
msgid ""
"A transformation is like a filter applied to the response generated by "
"your application."
msgstr ""

#: ../../Transformations.rst:8
msgid ""
"Transformations can be chained (the output of a transformation will be "
"the input of the following one) and can completely overwrite response "
"headers."
msgstr ""

#: ../../Transformations.rst:11
msgid ""
"The most common example of transformation is gzip encoding. The output of"
" your application is passed to a function compressing it with gzip and "
"setting the Content-Encoding header. This feature rely on 2 external "
"packages: libpcre3-dev, libz-dev on Ubuntu."
msgstr ""

#: ../../Transformations.rst:29
msgid ""
"The ``cachestore`` routing instruction is a transformation too, so you "
"can cache various states of the response."
msgstr ""

#: ../../Transformations.rst:55
msgid ""
"Another common transformation is applying stylesheets to XML files. (see "
":doc:`XSLT`)"
msgstr ""

#: ../../Transformations.rst:57
msgid "The ``toxslt`` transformation is exposed by the ``xslt`` plugin:"
msgstr ""

#: ../../Transformations.rst:63
msgid ""
"The ``mycd`` module here is a simple XML generator. Its output is then "
"passed to the XSLT transformation."
msgstr ""

#: ../../Transformations.rst:66
msgid "Streaming vs. buffering"
msgstr ""

#: ../../Transformations.rst:68
msgid ""
"Each transformation announces itself as a \"streaming\" one or a "
"\"buffering\" one."
msgstr ""

#: ../../Transformations.rst:70
msgid ""
"Streaming ones are transformations that can be applied to response chunks"
" (parts). An example of a streaming transformation is gzip (you do not "
"need the whole body to begin compressing it). Buffering transformations "
"are those requiring the full body before applying something to it. XSLT "
"is an example of buffering transformation. Another example of buffering "
"transformations are those used for storing response in some kind of "
"cache."
msgstr ""

#: ../../Transformations.rst:73
msgid ""
"If your whole pipeline is composed by only \"streaming\" transformations,"
" your client will receive the output chunk by chunk. On the other hand a "
"single buffering transformation will make the whole pipeline buffered, so"
" your client will get the output only at the end."
msgstr ""

#: ../../Transformations.rst:76
msgid "An often using streaming functionality is gzip + chunked:"
msgstr ""

#: ../../Transformations.rst:86
msgid ""
"The whole transformation pipeline is composed by streaming plugins, so "
"you will get each HTTP chunk in realtime."
msgstr ""

#: ../../Transformations.rst:89
msgid "Flushing magic"
msgstr ""

#: ../../Transformations.rst:91
msgid ""
"The \"flush\" transformation is a special one. It allows you to send the "
"current contents of the transformation buffer to the client (without "
"clearing the buffer)."
msgstr ""

#: ../../Transformations.rst:93
msgid ""
"You can use it for implementing streaming mode when buffering will be "
"applied. A common example is having streaming + caching:"
msgstr ""

#: ../../Transformations.rst:107
msgid ""
"You can call flush multiple times and in various parts of the chain. "
"Experiment a bit with it..."
msgstr ""

#: ../../Transformations.rst:110
msgid "Available transformations (last update 20130504)"
msgstr ""

#: ../../Transformations.rst:112
msgid ""
"``gzip``, exposed by the ``transformation_gzip`` plugin (encode the "
"response buffer to gzip)"
msgstr ""

#: ../../Transformations.rst:113
msgid ""
"``toupper``, exposed by the ``transformation_toupper`` plugin (example "
"plugin transforming each character in uppercase)"
msgstr ""

#: ../../Transformations.rst:114
msgid ""
"``tofile``, exposed by the ``transformation_tofile`` plugin (used for "
"caching to response buffer to a static file)"
msgstr ""

#: ../../Transformations.rst:115
msgid ""
"``toxslt``, exposed by the ``xslt`` plugin (apply xslt stylesheet to an "
"XML response buffer)"
msgstr ""

#: ../../Transformations.rst:116
msgid ""
"``cachestore``, exposed by the ``router_cache`` plugin (cache the "
"response buffer in the uWSGI cache)"
msgstr ""

#: ../../Transformations.rst:117
msgid "``chunked``, encode the output in HTTP chunked"
msgstr ""

#: ../../Transformations.rst:118
msgid "``flush``, flush the current buffer to the client"
msgstr ""

#: ../../Transformations.rst:119
msgid "``memcachedstore``, store the response buffer in a memcached object"
msgstr ""

#: ../../Transformations.rst:120
msgid "``redisstore``, store the response buffer in a redis object"
msgstr ""

#: ../../Transformations.rst:121
msgid "``template``, apply routing translations to each chunk"
msgstr ""

#: ../../Transformations.rst:124
msgid "Working on"
msgstr ""

#: ../../Transformations.rst:126
msgid ""
"``rpc``, allows applying rpc functions to a response buffer (limit 64k "
"size)"
msgstr ""

#: ../../Transformations.rst:127
msgid "``lua``, apply a lua function to a response buffer (no limit in size)"
msgstr ""

