# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2016, uWSGI
# This file is distributed under the same license as the uWSGI package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: uWSGI 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-09 10:15+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Ring.rst:2
msgid "The Clojure/Ring JVM request handler"
msgstr ""

#: ../../Ring.rst:4
msgid ""
"Thanks to the :doc:`JVM` plugin available from 1.9, Clojure web apps can "
"be run on uWSGI."
msgstr ""

#: ../../Ring.rst:6
msgid ""
"The supported gateway standard is Ring, https://github.com/ring-"
"clojure/ring . Its full specification is available here: "
"https://github.com/ring-clojure/ring/blob/master/SPEC"
msgstr ""

#: ../../Ring.rst:8
msgid ""
"A uWSGI build profile named \"ring\" is available for generating a "
"monolithic build with both the JVM and Ring plugins."
msgstr ""

#: ../../Ring.rst:10
msgid "From the uWSGI sources:"
msgstr ""

#: ../../Ring.rst:16
msgid ""
"The build system will try to detect your JDK installation based on "
"various presets (for example on CentOS you can ``yum install "
"java-1.6.0-openjdk.x86_64-devel`` or ``java-1.7.0-openjdk-devel.x86_64`` "
"or on Debian/Ubuntu ``openjdk-6-jdk`` and so on...)."
msgstr ""

#: ../../Ring.rst:19
msgid "OSX/Xcode default paths are searched too."
msgstr ""

#: ../../Ring.rst:21
msgid ""
"After a successful build you will have the uwsgi binary and a uwsgi.jar "
"file that you should copy in your CLASSPATH (or just remember to set it "
"in the uwsgi configuration every time)."
msgstr ""

#: ../../Ring.rst:24
msgid "For more information on the JVM plugin check :doc:`JVM`"
msgstr ""

#: ../../Ring.rst:27
msgid "Our first Ring app"
msgstr ""

#: ../../Ring.rst:29
msgid "A basic Clojure/Ring app could be the following (save it as myapp.clj):"
msgstr ""

#: ../../Ring.rst:42
msgid ""
"The code defines a new namespace called 'myapp', in which the 'handler' "
"function is the Ring entry point (the function called at each web "
"request)"
msgstr ""

#: ../../Ring.rst:44
msgid ""
"We can now build a configuration serving that app on the HTTP router on "
"port 9090 (call it config.ini):"
msgstr ""

#: ../../Ring.rst:59
msgid "Run uWSGI:"
msgstr ""

#: ../../Ring.rst:65
msgid "Now connect to port 9090 and you should see the app response."
msgstr ""

#: ../../Ring.rst:67
msgid ""
"As you can note we have manually added uwsgi.jar and the Leiningen "
"standalone jar (it includes the whole Clojure distribution) to our "
"classpath."
msgstr ""

#: ../../Ring.rst:69
msgid ""
"Obviously if you do not want to use Leiningen, just add the Clojure jar "
"to your classpath."
msgstr ""

#: ../../Ring.rst:71
msgid ""
"The ``clojure-load`` option loads a Clojure script in the JVM (very "
"similar to what ``jvm-class`` do with the basic jvm plugin)."
msgstr ""

#: ../../Ring.rst:73
msgid ""
"The ``ring-app`` option specify the class/namespace in which to search "
"for the ring function entry point."
msgstr ""

#: ../../Ring.rst:75
msgid ""
"In our case the function is in the 'myapp' namespace and it is called "
"'handler' (you can understand that the syntax is namespace:function)"
msgstr ""

#: ../../Ring.rst:77
msgid ""
"Pay attention to the modifier configuration. The JVM plugin registers "
"itself as 8, while Ring registers itself as modifier 2 #1, yielding an "
"effective configuration of \"modifier1 8, modifier2 1\"."
msgstr ""

#: ../../Ring.rst:80
msgid "Using Leiningen"
msgstr ""

#: ../../Ring.rst:82
msgid ""
"Leiningen is a great tool for managing Clojure projects. If you use "
"Clojure, you are very probably a Leiningen user."
msgstr ""

#: ../../Ring.rst:84
msgid ""
"One of the great advantages of Leiningen is the easy generation of a "
"single JAR distribution. That means you can deploy a whole app with a "
"single file."
msgstr ""

#: ../../Ring.rst:87
msgid ""
"Let's create a new \"helloworld\" Ring application with the ``lein`` "
"command."
msgstr ""

#: ../../Ring.rst:93
msgid ""
"Move it to the just created 'helloworld' directory and edit the "
"project.clj file"
msgstr ""

#: ../../Ring.rst:104
msgid ""
"We want to add the ``ring-core`` package to our dependencies (it contains"
" a set of classes/modules to simplify the writing of ring apps) and "
"obviously we need to change the description and URL:"
msgstr ""

#: ../../Ring.rst:115
msgid "Now save it and run..."
msgstr ""

#: ../../Ring.rst:121
msgid ""
"This will install all of the jars we need and move us to the Clojure "
"console (just exit from it for now)."
msgstr ""

#: ../../Ring.rst:123
msgid ""
"Now we want to write our Ring app, just edit the file "
"src/helloworld/core.clj and place the following content in it:"
msgstr ""

#: ../../Ring.rst:135
msgid ""
"Then re-edit project.clj to instruct Leiningen on which namespaces to "
"build:"
msgstr ""

#: ../../Ring.rst:149
msgid "As you can see we have added helloworld.core in the ``:aot`` keyword."
msgstr ""

#: ../../Ring.rst:151
msgid "Now let's compile our code:"
msgstr ""

#: ../../Ring.rst:157
msgid "And build the full jar (the uberjar):"
msgstr ""

#: ../../Ring.rst:163
msgid ""
"If all goes well you should see a message like this at the end of the "
"procedure:"
msgstr ""

#: ../../Ring.rst:169
msgid "Take a note of the path so we can configure uWSGI to run our application."
msgstr ""

#: ../../Ring.rst:185
msgid "This time we do not load Clojure code, but directly a JVM class."
msgstr ""

#: ../../Ring.rst:187
msgid ""
"Pay attention: when you specify a JVM class you have to use the '/' form,"
" not the usual dotted form."
msgstr ""

#: ../../Ring.rst:189
msgid ""
"The __init suffix is automatically added by the Clojure system when your "
"app is compiled."
msgstr ""

#: ../../Ring.rst:191
msgid ""
"The ``ring-app`` set the entry point to the helloworld.core namespace and"
" the function 'handler'."
msgstr ""

#: ../../Ring.rst:193
msgid "We can access that namespace as we have loaded it with ``jvm-class``"
msgstr ""

#: ../../Ring.rst:196
msgid "Concurrency"
msgstr ""

#: ../../Ring.rst:198
msgid ""
"As all of the JVM plugin request handlers, multi-threading is the best "
"way to achieve concurrency."
msgstr ""

#: ../../Ring.rst:200
msgid ""
"Threads in the JVM are really solid, do not be afraid to use them (even "
"if you can spawn multiple processes too)"
msgstr ""

#: ../../Ring.rst:220
msgid ""
"This setup will spawn 4 uWSGI processes (workers) with 8 threads each "
"(for a total of 32 threads)."
msgstr ""

#: ../../Ring.rst:223
msgid "Accessing the uWSGI api"
msgstr ""

#: ../../Ring.rst:225
msgid ""
"Clojure can call native Java classes too, so it is able to access the "
"uWSGI API exposed by the JVM plugin."
msgstr ""

#: ../../Ring.rst:227
msgid ""
"The following example shows how to call a function (written in python) "
"via Clojure:"
msgstr ""

#: ../../Ring.rst:242
msgid "The \"reverse\" function has been registered from a Python module:"
msgstr ""

#: ../../Ring.rst:252
msgid "This is the used configuration:"
msgstr ""

#: ../../Ring.rst:268
msgid ""
"Another useful feature is accessing the uwsgi cache. Remember that cache "
"keys are string while values are bytes."
msgstr ""

#: ../../Ring.rst:270
msgid ""
"The uWSGI Ring implementation supports byte array in addition to string "
"for the response. This is obviously a violation of the standard but "
"avoids you to re-encode bytes every time (but obviously you are free to "
"do it if you like)."
msgstr ""

#: ../../Ring.rst:274
msgid "Notes and status"
msgstr ""

#: ../../Ring.rst:276
msgid ""
"A shortcut option allowing to load compiled code and specifying the ring "
"app would be cool."
msgstr ""

#: ../../Ring.rst:277
msgid ""
"As with the :doc:`JWSGI` handler, all of the uWSGI performance features "
"are automatically used (like when sending static files or buffering "
"input)"
msgstr ""

#: ../../Ring.rst:278
msgid ""
"The plugin has been developed with the cooperation and ideas of Mingli "
"Yuan. Thanks!"
msgstr ""

